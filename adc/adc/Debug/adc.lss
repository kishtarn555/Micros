
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073b  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <readADC>:
#define F_CPU 4000000
#include <util/delay.h>
#include <avr/io.h>

uint8_t readADC(int8_t pin) {
	ADMUX = (0b01100000) | pin;
  6c:	80 66       	ori	r24, 0x60	; 96
  6e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<< ADSC);	
  70:	86 b1       	in	r24, 0x06	; 6
  72:	80 64       	ori	r24, 0x40	; 64
  74:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC));
  76:	36 99       	sbic	0x06, 6	; 6
  78:	fe cf       	rjmp	.-4      	; 0x76 <readADC+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	87 e5       	ldi	r24, 0x57	; 87
  7c:	92 e0       	ldi	r25, 0x02	; 2
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <readADC+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <readADC+0x18>
  84:	00 00       	nop
	_delay_us(600);
	return ADCH;
  86:	85 b1       	in	r24, 0x05	; 5
}
  88:	08 95       	ret

0000008a <decode>:

uint8_t decode(uint8_t x) {
	
	if (x < 51) {
  8a:	83 33       	cpi	r24, 0x33	; 51
  8c:	40 f0       	brcs	.+16     	; 0x9e <decode+0x14>
		return 0;
	} else
	if (x < 102) {
  8e:	86 36       	cpi	r24, 0x66	; 102
  90:	40 f0       	brcs	.+16     	; 0xa2 <decode+0x18>
		return 1;
	} else
	if (x< 153) {
  92:	89 39       	cpi	r24, 0x99	; 153
  94:	40 f0       	brcs	.+16     	; 0xa6 <decode+0x1c>
		return 3;
	} else
	if (x < 203) {
  96:	8b 3c       	cpi	r24, 0xCB	; 203
  98:	40 f4       	brcc	.+16     	; 0xaa <decode+0x20>
		return 7;
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	08 95       	ret
}

uint8_t decode(uint8_t x) {
	
	if (x < 51) {
		return 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 95       	ret
	} else
	if (x < 102) {
		return 1;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	08 95       	ret
	} else
	if (x< 153) {
		return 3;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	08 95       	ret
	} else
	if (x < 203) {
		return 7;
	} else {
		return 15;
  aa:	8f e0       	ldi	r24, 0x0F	; 15
	}
}
  ac:	08 95       	ret

000000ae <main>:
int main(void)
{
	// ADMUX en modo ref: 01, y con 1 en ADLR para que la res este en high
	ADMUX = (1<<REFS0) | (1<< ADLAR);
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	87 b9       	out	0x07, r24	; 7
	//Free running
	SFIOR = 0;
  b2:	10 be       	out	0x30, r1	; 48
	//ADEN activa el adc,
	//ADPS2 y ADPS0 es un prescaler de 32. Como el micro corre a 4MHz, pero el ADC corre a [50K - 200KHz]
	//Necesitamos que prescaler quede en el rango correcto, i.e 4Mhz/32 = 125KHz
	ADCSRA = (1<< ADEN)|(1 << ADPS2) | (1 << ADPS0);
  b4:	85 e8       	ldi	r24, 0x85	; 133
  b6:	86 b9       	out	0x06, r24	; 6
	DDRA = 0;
  b8:	1a ba       	out	0x1a, r1	; 26
	
	DDRB = 255;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	87 bb       	out	0x17, r24	; 23
	DDRC = 255;
  be:	84 bb       	out	0x14, r24	; 20
	uint8_t sen1,sen2, sen3;
    while (1) {
		sen1 = readADC(0);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <readADC>
  c6:	d8 2f       	mov	r29, r24
		sen2= readADC(1);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <readADC>
  ce:	18 2f       	mov	r17, r24
		sen3= readADC(2);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <readADC>
  d6:	c8 2f       	mov	r28, r24
		PORTB = decode(sen1) | (decode(sen2)<<4);
  d8:	8d 2f       	mov	r24, r29
  da:	0e 94 45 00 	call	0x8a	; 0x8a <decode>
  de:	d8 2f       	mov	r29, r24
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 45 00 	call	0x8a	; 0x8a <decode>
  e6:	20 e1       	ldi	r18, 0x10	; 16
  e8:	82 9f       	mul	r24, r18
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	8d 2b       	or	r24, r29
  f0:	88 bb       	out	0x18, r24	; 24
		PORTC = decode(sen3);
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 45 00 	call	0x8a	; 0x8a <decode>
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	e2 cf       	rjmp	.-60     	; 0xc0 <main+0x12>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
