
Interrputs_Die.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fe  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000601  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015b  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a4 e6       	ldi	r26, 0x64	; 100
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 e8       	ldi	r30, 0x86	; 134
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <stdlib.h>
volatile uint16_t seed;
volatile uint8_t number;

int main(void) {
	DDRD = 0;
  92:	11 ba       	out	0x11, r1	; 17
	PORTD = 0;
  94:	12 ba       	out	0x12, r1	; 18
	DDRA = 255;	
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	DDRB = 255;
  9a:	87 bb       	out	0x17, r24	; 23
	PORTA = PORTB = 0;
  9c:	18 ba       	out	0x18, r1	; 24
  9e:	1b ba       	out	0x1b, r1	; 27
	sei();
  a0:	78 94       	sei
	//Avoid tripping the interrupt on start
	GIFR |= (1<<6);
  a2:	8a b7       	in	r24, 0x3a	; 58
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8a bf       	out	0x3a, r24	; 58
	// Active interrupt 1
	GICR |= (1<< 6); 
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR & 0b11110000;
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	85 bf       	out	0x35, r24	; 53
	number=0;
  b4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
	while (1) {
		seed++;
  b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <seed>
  bc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <seed+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <seed+0x1>
  c6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <seed>
  ca:	f6 cf       	rjmp	.-20     	; 0xb8 <main+0x26>

000000cc <__vector_1>:
#define p11 16
#define p12 32
#define p20 64
#define p21 128

ISR(INT0_vect) {
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__vector_1+0x28>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__vector_1+0x32>
  fe:	00 00       	nop
	_delay_ms(100);
	uint8_t x=0;
	while ((PIND & (1<<2))==0) {
 100:	82 9b       	sbis	0x10, 2	; 16
 102:	fe cf       	rjmp	.-4      	; 0x100 <__vector_1+0x34>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <__vector_1+0x3e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__vector_1+0x48>
 114:	00 00       	nop
		x++;
	}
	_delay_ms(100);
	if (number ==0 ) {
 116:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 11a:	81 11       	cpse	r24, r1
 11c:	06 c0       	rjmp	.+12     	; 0x12a <__vector_1+0x5e>
		srand(seed);
 11e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <seed>
 122:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <seed+0x1>
 126:	0e 94 53 01 	call	0x2a6	; 0x2a6 <srand>
	}
	number = rand()%6+1;
 12a:	0e 94 4e 01 	call	0x29c	; 0x29c <rand>
 12e:	66 e0       	ldi	r22, 0x06	; 6
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	// number to die decoder
	switch(number) {
 13c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	a1 f0       	breq	.+40     	; 0x16c <__vector_1+0xa0>
 144:	28 f4       	brcc	.+10     	; 0x150 <__vector_1+0x84>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	49 f0       	breq	.+18     	; 0x15c <__vector_1+0x90>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	59 f0       	breq	.+22     	; 0x164 <__vector_1+0x98>
 14e:	21 c0       	rjmp	.+66     	; 0x192 <__vector_1+0xc6>
 150:	85 30       	cpi	r24, 0x05	; 5
 152:	b1 f0       	breq	.+44     	; 0x180 <__vector_1+0xb4>
 154:	80 f0       	brcs	.+32     	; 0x176 <__vector_1+0xaa>
 156:	86 30       	cpi	r24, 0x06	; 6
 158:	c1 f0       	breq	.+48     	; 0x18a <__vector_1+0xbe>
 15a:	1b c0       	rjmp	.+54     	; 0x192 <__vector_1+0xc6>
		case 1:
			PORTA = p11;
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0;
 160:	18 ba       	out	0x18, r1	; 24
			break;
 162:	17 c0       	rjmp	.+46     	; 0x192 <__vector_1+0xc6>
		case 2:
			PORTA = p02 | p20;
 164:	84 e4       	ldi	r24, 0x44	; 68
 166:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0;
 168:	18 ba       	out	0x18, r1	; 24
			break;
 16a:	13 c0       	rjmp	.+38     	; 0x192 <__vector_1+0xc6>
		case 3:
			PORTA = p00 | p11;
 16c:	81 e1       	ldi	r24, 0x11	; 17
 16e:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	88 bb       	out	0x18, r24	; 24
			break;
 174:	0e c0       	rjmp	.+28     	; 0x192 <__vector_1+0xc6>
		case 4:
			PORTA = p00 | p02 | p20;			
 176:	85 e4       	ldi	r24, 0x45	; 69
 178:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	88 bb       	out	0x18, r24	; 24
			break;
 17e:	09 c0       	rjmp	.+18     	; 0x192 <__vector_1+0xc6>
		case 5:
			PORTA = p00 | p02 | p20 | p11;
 180:	85 e5       	ldi	r24, 0x55	; 85
 182:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	88 bb       	out	0x18, r24	; 24
			break;
 188:	04 c0       	rjmp	.+8      	; 0x192 <__vector_1+0xc6>
		case 6:
			PORTA = p00 | p02 | p10 | p12 | p20;
 18a:	8d e6       	ldi	r24, 0x6D	; 109
 18c:	8b bb       	out	0x1b, r24	; 27
			PORTB = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	88 bb       	out	0x18, r24	; 24
	}
	// put number to debug
	#ifdef UP_DEBUG
		PORTB |= number << 1;
	#endif
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__divmodhi4>:
 1b4:	97 fb       	bst	r25, 7
 1b6:	07 2e       	mov	r0, r23
 1b8:	16 f4       	brtc	.+4      	; 0x1be <__divmodhi4+0xa>
 1ba:	00 94       	com	r0
 1bc:	07 d0       	rcall	.+14     	; 0x1cc <__divmodhi4_neg1>
 1be:	77 fd       	sbrc	r23, 7
 1c0:	09 d0       	rcall	.+18     	; 0x1d4 <__divmodhi4_neg2>
 1c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodhi4>
 1c6:	07 fc       	sbrc	r0, 7
 1c8:	05 d0       	rcall	.+10     	; 0x1d4 <__divmodhi4_neg2>
 1ca:	3e f4       	brtc	.+14     	; 0x1da <__divmodhi4_exit>

000001cc <__divmodhi4_neg1>:
 1cc:	90 95       	com	r25
 1ce:	81 95       	neg	r24
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	08 95       	ret

000001d4 <__divmodhi4_neg2>:
 1d4:	70 95       	com	r23
 1d6:	61 95       	neg	r22
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255

000001da <__divmodhi4_exit>:
 1da:	08 95       	ret

000001dc <__udivmodhi4>:
 1dc:	aa 1b       	sub	r26, r26
 1de:	bb 1b       	sub	r27, r27
 1e0:	51 e1       	ldi	r21, 0x11	; 17
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__udivmodhi4_ep>

000001e4 <__udivmodhi4_loop>:
 1e4:	aa 1f       	adc	r26, r26
 1e6:	bb 1f       	adc	r27, r27
 1e8:	a6 17       	cp	r26, r22
 1ea:	b7 07       	cpc	r27, r23
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <__udivmodhi4_ep>
 1ee:	a6 1b       	sub	r26, r22
 1f0:	b7 0b       	sbc	r27, r23

000001f2 <__udivmodhi4_ep>:
 1f2:	88 1f       	adc	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	5a 95       	dec	r21
 1f8:	a9 f7       	brne	.-22     	; 0x1e4 <__udivmodhi4_loop>
 1fa:	80 95       	com	r24
 1fc:	90 95       	com	r25
 1fe:	bc 01       	movw	r22, r24
 200:	cd 01       	movw	r24, r26
 202:	08 95       	ret

00000204 <do_rand>:
 204:	8f 92       	push	r8
 206:	9f 92       	push	r9
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	68 81       	ld	r22, Y
 21c:	79 81       	ldd	r23, Y+1	; 0x01
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	9b 81       	ldd	r25, Y+3	; 0x03
 222:	61 15       	cp	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	81 05       	cpc	r24, r1
 228:	91 05       	cpc	r25, r1
 22a:	21 f4       	brne	.+8      	; 0x234 <do_rand+0x30>
 22c:	64 e2       	ldi	r22, 0x24	; 36
 22e:	79 ed       	ldi	r23, 0xD9	; 217
 230:	8b e5       	ldi	r24, 0x5B	; 91
 232:	97 e0       	ldi	r25, 0x07	; 7
 234:	2d e1       	ldi	r18, 0x1D	; 29
 236:	33 ef       	ldi	r19, 0xF3	; 243
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__divmodsi4>
 240:	49 01       	movw	r8, r18
 242:	5a 01       	movw	r10, r20
 244:	9b 01       	movw	r18, r22
 246:	ac 01       	movw	r20, r24
 248:	a7 ea       	ldi	r26, 0xA7	; 167
 24a:	b1 e4       	ldi	r27, 0x41	; 65
 24c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__muluhisi3>
 250:	6b 01       	movw	r12, r22
 252:	7c 01       	movw	r14, r24
 254:	ac ee       	ldi	r26, 0xEC	; 236
 256:	b4 ef       	ldi	r27, 0xF4	; 244
 258:	a5 01       	movw	r20, r10
 25a:	94 01       	movw	r18, r8
 25c:	0e 94 8b 01 	call	0x316	; 0x316 <__mulohisi3>
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	8c 0d       	add	r24, r12
 266:	9d 1d       	adc	r25, r13
 268:	ae 1d       	adc	r26, r14
 26a:	bf 1d       	adc	r27, r15
 26c:	b7 ff       	sbrs	r27, 7
 26e:	03 c0       	rjmp	.+6      	; 0x276 <do_rand+0x72>
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	a1 09       	sbc	r26, r1
 274:	b0 48       	sbci	r27, 0x80	; 128
 276:	88 83       	st	Y, r24
 278:	99 83       	std	Y+1, r25	; 0x01
 27a:	aa 83       	std	Y+2, r26	; 0x02
 27c:	bb 83       	std	Y+3, r27	; 0x03
 27e:	9f 77       	andi	r25, 0x7F	; 127
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	08 95       	ret

00000296 <rand_r>:
 296:	0e 94 02 01 	call	0x204	; 0x204 <do_rand>
 29a:	08 95       	ret

0000029c <rand>:
 29c:	80 e6       	ldi	r24, 0x60	; 96
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 02 01 	call	0x204	; 0x204 <do_rand>
 2a4:	08 95       	ret

000002a6 <srand>:
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2b2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2b6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2ba:	08 95       	ret

000002bc <__divmodsi4>:
 2bc:	05 2e       	mov	r0, r21
 2be:	97 fb       	bst	r25, 7
 2c0:	1e f4       	brtc	.+6      	; 0x2c8 <__divmodsi4+0xc>
 2c2:	00 94       	com	r0
 2c4:	0e 94 75 01 	call	0x2ea	; 0x2ea <__negsi2>
 2c8:	57 fd       	sbrc	r21, 7
 2ca:	07 d0       	rcall	.+14     	; 0x2da <__divmodsi4_neg2>
 2cc:	0e 94 90 01 	call	0x320	; 0x320 <__udivmodsi4>
 2d0:	07 fc       	sbrc	r0, 7
 2d2:	03 d0       	rcall	.+6      	; 0x2da <__divmodsi4_neg2>
 2d4:	4e f4       	brtc	.+18     	; 0x2e8 <__divmodsi4_exit>
 2d6:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__negsi2>

000002da <__divmodsi4_neg2>:
 2da:	50 95       	com	r21
 2dc:	40 95       	com	r20
 2de:	30 95       	com	r19
 2e0:	21 95       	neg	r18
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	4f 4f       	sbci	r20, 0xFF	; 255
 2e6:	5f 4f       	sbci	r21, 0xFF	; 255

000002e8 <__divmodsi4_exit>:
 2e8:	08 95       	ret

000002ea <__negsi2>:
 2ea:	90 95       	com	r25
 2ec:	80 95       	com	r24
 2ee:	70 95       	com	r23
 2f0:	61 95       	neg	r22
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	8f 4f       	sbci	r24, 0xFF	; 255
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__muluhisi3>:
 2fa:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 2fe:	a5 9f       	mul	r26, r21
 300:	90 0d       	add	r25, r0
 302:	b4 9f       	mul	r27, r20
 304:	90 0d       	add	r25, r0
 306:	a4 9f       	mul	r26, r20
 308:	80 0d       	add	r24, r0
 30a:	91 1d       	adc	r25, r1
 30c:	11 24       	eor	r1, r1
 30e:	08 95       	ret

00000310 <__mulshisi3>:
 310:	b7 ff       	sbrs	r27, 7
 312:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__muluhisi3>

00000316 <__mulohisi3>:
 316:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__muluhisi3>
 31a:	82 1b       	sub	r24, r18
 31c:	93 0b       	sbc	r25, r19
 31e:	08 95       	ret

00000320 <__udivmodsi4>:
 320:	a1 e2       	ldi	r26, 0x21	; 33
 322:	1a 2e       	mov	r1, r26
 324:	aa 1b       	sub	r26, r26
 326:	bb 1b       	sub	r27, r27
 328:	fd 01       	movw	r30, r26
 32a:	0d c0       	rjmp	.+26     	; 0x346 <__udivmodsi4_ep>

0000032c <__udivmodsi4_loop>:
 32c:	aa 1f       	adc	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	ee 1f       	adc	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	a2 17       	cp	r26, r18
 336:	b3 07       	cpc	r27, r19
 338:	e4 07       	cpc	r30, r20
 33a:	f5 07       	cpc	r31, r21
 33c:	20 f0       	brcs	.+8      	; 0x346 <__udivmodsi4_ep>
 33e:	a2 1b       	sub	r26, r18
 340:	b3 0b       	sbc	r27, r19
 342:	e4 0b       	sbc	r30, r20
 344:	f5 0b       	sbc	r31, r21

00000346 <__udivmodsi4_ep>:
 346:	66 1f       	adc	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	1a 94       	dec	r1
 350:	69 f7       	brne	.-38     	; 0x32c <__udivmodsi4_loop>
 352:	60 95       	com	r22
 354:	70 95       	com	r23
 356:	80 95       	com	r24
 358:	90 95       	com	r25
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	bd 01       	movw	r22, r26
 360:	cf 01       	movw	r24, r30
 362:	08 95       	ret

00000364 <__umulhisi3>:
 364:	a2 9f       	mul	r26, r18
 366:	b0 01       	movw	r22, r0
 368:	b3 9f       	mul	r27, r19
 36a:	c0 01       	movw	r24, r0
 36c:	a3 9f       	mul	r26, r19
 36e:	70 0d       	add	r23, r0
 370:	81 1d       	adc	r24, r1
 372:	11 24       	eor	r1, r1
 374:	91 1d       	adc	r25, r1
 376:	b2 9f       	mul	r27, r18
 378:	70 0d       	add	r23, r0
 37a:	81 1d       	adc	r24, r1
 37c:	11 24       	eor	r1, r1
 37e:	91 1d       	adc	r25, r1
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
