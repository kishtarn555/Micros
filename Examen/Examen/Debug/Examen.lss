
Examen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00000824  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080013c  0080013c  00000994  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e9  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac3  00000000  00000000  00002aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a46  00000000  00000000  00003d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 33       	cpi	r26, 0x3C	; 60
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e3       	ldi	r26, 0x3C	; 60
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 34       	cpi	r26, 0x4A	; 74
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  8a:	0c 94 10 04 	jmp	0x820	; 0x820 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyboardInit>:
#include <util/delay.h>


void keyboardInit(void) {
	#if KB_READWRITEMODE == 1
		DDRKB = 0b00011111;
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	87 bb       	out	0x17, r24	; 23
	#else
		DDRKB = 0b11100001;
	#endif
	PORTKB = 255;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <keyboardRead>:

uint8_t keyboardRead() {
	uint8_t response =0;	
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
  9c:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	PORTKB = 255;
}

uint8_t keyboardRead() {
	uint8_t response =0;	
  9e:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
  a0:	2a c0       	rjmp	.+84     	; 0xf6 <keyboardRead+0x5a>
		PORTKB = 255 ^ kb_out(i);
  a2:	43 e0       	ldi	r20, 0x03	; 3
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	49 1b       	sub	r20, r25
  a8:	51 09       	sbc	r21, r1
  aa:	22 e0       	ldi	r18, 0x02	; 2
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <keyboardRead+0x18>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	4a 95       	dec	r20
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <keyboardRead+0x14>
  b8:	20 95       	com	r18
  ba:	28 bb       	out	0x18, r18	; 24
		asm("nop");
  bc:	00 00       	nop
		test = PINKB & kb_readpins;
  be:	26 b3       	in	r18, 0x16	; 22
  c0:	32 2f       	mov	r19, r18
  c2:	30 7f       	andi	r19, 0xF0	; 240
		if (test != kb_readpins) {
  c4:	30 3f       	cpi	r19, 0xF0	; 240
  c6:	a9 f0       	breq	.+42     	; 0xf2 <keyboardRead+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	4f e7       	ldi	r20, 0x7F	; 127
  ca:	58 e3       	ldi	r21, 0x38	; 56
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	60 40       	sbci	r22, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <keyboardRead+0x32>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <keyboardRead+0x3c>
  d8:	00 00       	nop
			_delay_ms(50);
			//if (!(test & kb_read0))
				//return response;
			if (!(test & kb_read1))
  da:	25 fd       	sbrc	r18, 5
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <keyboardRead+0x46>
				return response+1;				
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	08 95       	ret
			if (!(test & kb_read2))
  e2:	26 fd       	sbrc	r18, 6
  e4:	02 c0       	rjmp	.+4      	; 0xea <keyboardRead+0x4e>
				return response+2;				
  e6:	8e 5f       	subi	r24, 0xFE	; 254
  e8:	08 95       	ret
			if (!(test & kb_read3))
  ea:	33 23       	and	r19, r19
  ec:	14 f0       	brlt	.+4      	; 0xf2 <keyboardRead+0x56>
				return response+3;
  ee:	8d 5f       	subi	r24, 0xFD	; 253
  f0:	08 95       	ret
		}
		response+=3;
  f2:	8d 5f       	subi	r24, 0xFD	; 253

uint8_t keyboardRead() {
	uint8_t response =0;	
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	94 30       	cpi	r25, 0x04	; 4
  f8:	a0 f2       	brcs	.-88     	; 0xa2 <keyboardRead+0x6>
			if (!(test & kb_read3))
				return response+3;
		}
		response+=3;
	}
	return 0;
  fa:	80 e0       	ldi	r24, 0x00	; 0
}
  fc:	08 95       	ret

000000fe <keyboardHoldUntilOff>:

void keyboardHoldUntilOff() {
	while (keyboardRead()) {;}
  fe:	0e 94 4e 00 	call	0x9c	; 0x9c <keyboardRead>
 102:	81 11       	cpse	r24, r1
 104:	fc cf       	rjmp	.-8      	; 0xfe <keyboardHoldUntilOff>
 106:	2f e7       	ldi	r18, 0x7F	; 127
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <keyboardHoldUntilOff+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <keyboardHoldUntilOff+0x18>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <keyboardReadOnRelease>:
	_delay_ms(50);
}

uint8_t keyboardReadOnRelease() {
 11a:	cf 93       	push	r28
	uint8_t response =0;
	do {
		response = keyboardRead();
 11c:	0e 94 4e 00 	call	0x9c	; 0x9c <keyboardRead>
 120:	c8 2f       	mov	r28, r24
	} while (response==0);
 122:	88 23       	and	r24, r24
 124:	d9 f3       	breq	.-10     	; 0x11c <keyboardReadOnRelease+0x2>
	keyboardHoldUntilOff();
 126:	0e 94 7f 00 	call	0xfe	; 0xfe <keyboardHoldUntilOff>
	return response;
}
 12a:	8c 2f       	mov	r24, r28
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <keyboardDecode>:

uint8_t keyboardDecode(const uint8_t keycode) {
	return KB_CODE_STR[keycode-1];
 130:	e8 2f       	mov	r30, r24
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ed 59       	subi	r30, 0x9D	; 157
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	08 95       	ret

0000013c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	85 bb       	out	0x15, r24	; 21
 142:	00 c0       	rjmp	.+0      	; 0x144 <toggle_e+0x8>
 144:	85 b3       	in	r24, 0x15	; 21
 146:	8f 7b       	andi	r24, 0xBF	; 191
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret

0000014c <lcd_write>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	d8 2f       	mov	r29, r24
 152:	66 23       	and	r22, r22
 154:	21 f0       	breq	.+8      	; 0x15e <lcd_write+0x12>
 156:	85 b3       	in	r24, 0x15	; 21
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0x18>
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	8f 77       	andi	r24, 0x7F	; 127
 162:	85 bb       	out	0x15, r24	; 21
 164:	85 b3       	in	r24, 0x15	; 21
 166:	8f 7e       	andi	r24, 0xEF	; 239
 168:	85 bb       	out	0x15, r24	; 21
 16a:	84 b3       	in	r24, 0x14	; 20
 16c:	8f 60       	ori	r24, 0x0F	; 15
 16e:	84 bb       	out	0x14, r24	; 20
 170:	c5 b3       	in	r28, 0x15	; 21
 172:	c0 7f       	andi	r28, 0xF0	; 240
 174:	8d 2f       	mov	r24, r29
 176:	82 95       	swap	r24
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	8c 2b       	or	r24, r28
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_e>
 182:	df 70       	andi	r29, 0x0F	; 15
 184:	dc 2b       	or	r29, r28
 186:	d5 bb       	out	0x15, r29	; 21
 188:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_e>
 18c:	cf 60       	ori	r28, 0x0F	; 15
 18e:	c5 bb       	out	0x15, r28	; 21
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_read>:
 196:	88 23       	and	r24, r24
 198:	21 f0       	breq	.+8      	; 0x1a2 <lcd_read+0xc>
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_read+0x12>
 1a2:	85 b3       	in	r24, 0x15	; 21
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	85 bb       	out	0x15, r24	; 21
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	84 b3       	in	r24, 0x14	; 20
 1b0:	80 7f       	andi	r24, 0xF0	; 240
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_read+0x26>
 1bc:	93 b3       	in	r25, 0x13	; 19
 1be:	92 95       	swap	r25
 1c0:	90 7f       	andi	r25, 0xF0	; 240
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	8f 7b       	andi	r24, 0xBF	; 191
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_read+0x34>
 1ca:	85 b3       	in	r24, 0x15	; 21
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	85 bb       	out	0x15, r24	; 21
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_read+0x3c>
 1d2:	83 b3       	in	r24, 0x13	; 19
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	2f 7b       	andi	r18, 0xBF	; 191
 1da:	25 bb       	out	0x15, r18	; 21
 1dc:	89 2b       	or	r24, r25
 1de:	08 95       	ret

000001e0 <lcd_waitbusy>:
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_read>
 1e6:	88 23       	and	r24, r24
 1e8:	dc f3       	brlt	.-10     	; 0x1e0 <lcd_waitbusy>
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_waitbusy+0xe>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_read>
 1f8:	08 95       	ret

000001fa <lcd_command>:
 1fa:	cf 93       	push	r28
 1fc:	c8 2f       	mov	r28, r24
 1fe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_gotoxy>:
 20e:	61 11       	cpse	r22, r1
 210:	04 c0       	rjmp	.+8      	; 0x21a <lcd_gotoxy+0xc>
 212:	80 58       	subi	r24, 0x80	; 128
 214:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 218:	08 95       	ret
 21a:	80 54       	subi	r24, 0x40	; 64
 21c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 220:	08 95       	ret

00000222 <lcd_clrscr>:
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 228:	08 95       	ret

0000022a <lcd_putc>:
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
 22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
 232:	ca 30       	cpi	r28, 0x0A	; 10
 234:	49 f4       	brne	.+18     	; 0x248 <lcd_putc+0x1e>
 236:	80 34       	cpi	r24, 0x40	; 64
 238:	10 f4       	brcc	.+4      	; 0x23e <lcd_putc+0x14>
 23a:	80 e4       	ldi	r24, 0x40	; 64
 23c:	01 c0       	rjmp	.+2      	; 0x240 <lcd_putc+0x16>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	80 58       	subi	r24, 0x80	; 128
 242:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 246:	04 c0       	rjmp	.+8      	; 0x250 <lcd_putc+0x26>
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <lcd_puts>:
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	fc 01       	movw	r30, r24
 25a:	03 c0       	rjmp	.+6      	; 0x262 <lcd_puts+0xe>
 25c:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
 260:	fe 01       	movw	r30, r28
 262:	ef 01       	movw	r28, r30
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	80 81       	ld	r24, Z
 268:	81 11       	cpse	r24, r1
 26a:	f8 cf       	rjmp	.-16     	; 0x25c <lcd_puts+0x8>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 27a:	84 b3       	in	r24, 0x14	; 20
 27c:	8f 60       	ori	r24, 0x0F	; 15
 27e:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 280:	84 b3       	in	r24, 0x14	; 20
 282:	80 68       	ori	r24, 0x80	; 128
 284:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 286:	84 b3       	in	r24, 0x14	; 20
 288:	80 61       	ori	r24, 0x10	; 16
 28a:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 28c:	84 b3       	in	r24, 0x14	; 20
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	9d e7       	ldi	r25, 0x7D	; 125
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x24>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 29a:	85 b3       	in	r24, 0x15	; 21
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2a0:	85 b3       	in	r24, 0x15	; 21
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 2a6:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	97 e2       	ldi	r25, 0x27	; 39
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x3c>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2b2:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b6:	c0 e8       	ldi	r28, 0x80	; 128
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_init+0x4a>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2c0:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x54>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2ca:	85 b3       	in	r24, 0x15	; 21
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 2d0:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2d4:	21 97       	sbiw	r28, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_init+0x62>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2d8:	88 e2       	ldi	r24, 0x28	; 40
 2da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2e4:	0e 94 11 01 	call	0x222	; 0x222 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>

}/* lcd_init */
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <setup>:
void part3();
void part4();



void setup() {
 2fc:	cf 93       	push	r28
	lcd_init(LCD_DISP_ON);	
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	0e 94 39 01 	call	0x272	; 0x272 <lcd_init>
	DDRA = 255;
 304:	cf ef       	ldi	r28, 0xFF	; 255
 306:	ca bb       	out	0x1a, r28	; 26
	PORTA = 0;
 308:	1b ba       	out	0x1b, r1	; 27
	keyboardInit();
 30a:	0e 94 49 00 	call	0x92	; 0x92 <keyboardInit>
	DDRD =0;
 30e:	11 ba       	out	0x11, r1	; 17
	PORTD = 255;
 310:	c2 bb       	out	0x12, r28	; 18
	TCCR0 = TIMER0_CTC | PSCLR0_8;
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	83 bf       	out	0x33, r24	; 51
	OCR0 = 199;
 316:	87 ec       	ldi	r24, 0xC7	; 199
 318:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	89 bf       	out	0x39, r24	; 57
	cli();
 31e:	f8 94       	cli
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <cls>:
		_delay_ms(1000);
    }
}

void cls() {
	lcd_gotoxy(0,0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("                ");
 32c:	81 e7       	ldi	r24, 0x71	; 113
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
	lcd_gotoxy(0,1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("                ");
 33c:	81 e7       	ldi	r24, 0x71	; 113
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
	//For good measure
	lcd_gotoxy(0,0);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
 34c:	08 95       	ret

0000034e <showMessage>:
}

void showMessage(char * up, char *down) {
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	8c 01       	movw	r16, r24
 358:	eb 01       	movw	r28, r22
	cls();
 35a:	0e 94 92 01 	call	0x324	; 0x324 <cls>
	lcd_puts(up);
 35e:	c8 01       	movw	r24, r16
 360:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
	lcd_gotoxy(0,1);	
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts(down);	
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	89 e6       	ldi	r24, 0x69	; 105
 376:	98 e1       	ldi	r25, 0x18	; 24
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <showMessage+0x2a>
 380:	00 c0       	rjmp	.+0      	; 0x382 <showMessage+0x34>
 382:	00 00       	nop
	_delay_ms(1000);
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	08 95       	ret

0000038e <part1>:

void part1() {
	PORTA = 15;
 38e:	8f e0       	ldi	r24, 0x0F	; 15
 390:	8b bb       	out	0x1b, r24	; 27
	showMessage("Mediremos tu", "reaccion.");
 392:	62 e8       	ldi	r22, 0x82	; 130
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	8c e8       	ldi	r24, 0x8C	; 140
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 a7 01 	call	0x34e	; 0x34e <showMessage>
	showMessage("Debes presionar", "INICIO");	
 39e:	69 e9       	ldi	r22, 0x99	; 153
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	80 ea       	ldi	r24, 0xA0	; 160
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 a7 01 	call	0x34e	; 0x34e <showMessage>
	showMessage("Presiona los", "numeros en orden");	
 3aa:	60 eb       	ldi	r22, 0xB0	; 176
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	81 ec       	ldi	r24, 0xC1	; 193
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 a7 01 	call	0x34e	; 0x34e <showMessage>
	showMessage("Luego presiona", "DETENER");	
 3b6:	6e ec       	ldi	r22, 0xCE	; 206
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	86 ed       	ldi	r24, 0xD6	; 214
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 a7 01 	call	0x34e	; 0x34e <showMessage>
	showMessage("Listo?", "Te espero...");
 3c2:	65 ee       	ldi	r22, 0xE5	; 229
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	82 ef       	ldi	r24, 0xF2	; 242
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 a7 01 	call	0x34e	; 0x34e <showMessage>
 3ce:	08 95       	ret

000003d0 <part2>:
}

int8_t randoms[5];
uint8_t guess[5];
void part2() {
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
	cls();
 3d6:	0e 94 92 01 	call	0x324	; 0x324 <cls>
	srand(ticks);
 3da:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticks>
 3de:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticks+0x1>
 3e2:	0e 94 a2 03 	call	0x744	; 0x744 <srand>
	lcd_gotoxy(0,0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("Los numeros son:");	
 3ee:	89 ef       	ldi	r24, 0xF9	; 249
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
	lcd_gotoxy(0,1);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	for (int8_t i =0; i < 5; i++) {
 3fe:	c0 e0       	ldi	r28, 0x00	; 0
 400:	1c c0       	rjmp	.+56     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
		randoms[i] = rand()%10;
 402:	0c 2f       	mov	r16, r28
 404:	0c 2e       	mov	r0, r28
 406:	00 0c       	add	r0, r0
 408:	11 0b       	sbc	r17, r17
 40a:	0e 94 9d 03 	call	0x73a	; 0x73a <rand>
 40e:	6a e0       	ldi	r22, 0x0A	; 10
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 416:	f8 01       	movw	r30, r16
 418:	e4 5c       	subi	r30, 0xC4	; 196
 41a:	fe 4f       	sbci	r31, 0xFE	; 254
 41c:	80 83       	st	Z, r24
		if (i !=0) {
 41e:	cc 23       	and	r28, r28
 420:	21 f0       	breq	.+8      	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
			lcd_puts(", ");
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
		}
		lcd_putc(randoms[i]+'0');
 42a:	f8 01       	movw	r30, r16
 42c:	e4 5c       	subi	r30, 0xC4	; 196
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	80 81       	ld	r24, Z
 432:	80 5d       	subi	r24, 0xD0	; 208
 434:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
	cls();
	srand(ticks);
	lcd_gotoxy(0,0);
	lcd_puts("Los numeros son:");	
	lcd_gotoxy(0,1);
	for (int8_t i =0; i < 5; i++) {
 438:	cf 5f       	subi	r28, 0xFF	; 255
 43a:	c5 30       	cpi	r28, 0x05	; 5
 43c:	14 f3       	brlt	.-60     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
			lcd_puts(", ");
		}
		lcd_putc(randoms[i]+'0');
	}
	
}
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	08 95       	ret

00000446 <part3>:

void part3() {
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
	centiseconds=0;
 44c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <centiseconds+0x1>
 450:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <centiseconds>
	ticks=0;
 454:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <ticks+0x1>
 458:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <ticks>
	sei();
 45c:	78 94       	sei
	int8_t ptr=0;
 45e:	c0 e0       	ldi	r28, 0x00	; 0
	while (ptr < 5) {
 460:	0f c0       	rjmp	.+30     	; 0x480 <__stack+0x21>
		guess[ptr] = keyboardDecode(keyboardReadOnRelease())-'0';
 462:	0c 2f       	mov	r16, r28
 464:	0c 2e       	mov	r0, r28
 466:	00 0c       	add	r0, r0
 468:	11 0b       	sbc	r17, r17
 46a:	0e 94 8d 00 	call	0x11a	; 0x11a <keyboardReadOnRelease>
 46e:	0e 94 98 00 	call	0x130	; 0x130 <keyboardDecode>
 472:	80 53       	subi	r24, 0x30	; 48
 474:	f8 01       	movw	r30, r16
 476:	ef 5b       	subi	r30, 0xBF	; 191
 478:	fe 4f       	sbci	r31, 0xFE	; 254
 47a:	80 83       	st	Z, r24
		PORTA = guess[ptr];
 47c:	8b bb       	out	0x1b, r24	; 27
		ptr++;
 47e:	cf 5f       	subi	r28, 0xFF	; 255
void part3() {
	centiseconds=0;
	ticks=0;
	sei();
	int8_t ptr=0;
	while (ptr < 5) {
 480:	c5 30       	cpi	r28, 0x05	; 5
 482:	7c f3       	brlt	.-34     	; 0x462 <__stack+0x3>
		guess[ptr] = keyboardDecode(keyboardReadOnRelease())-'0';
		PORTA = guess[ptr];
		ptr++;
	}		
}	
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <part4>:

void part4() {
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
	for (uint8_t i =0; i < 5; i++) {
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	19 c0       	rjmp	.+50     	; 0x4c6 <part4+0x3a>
		if (guess[i]!=randoms[i]) {
 494:	82 2f       	mov	r24, r18
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	fc 01       	movw	r30, r24
 49a:	ef 5b       	subi	r30, 0xBF	; 191
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	40 81       	ld	r20, Z
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	e4 5c       	subi	r30, 0xC4	; 196
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	80 81       	ld	r24, Z
 4aa:	08 2e       	mov	r0, r24
 4ac:	00 0c       	add	r0, r0
 4ae:	99 0b       	sbc	r25, r25
 4b0:	48 17       	cp	r20, r24
 4b2:	59 07       	cpc	r21, r25
 4b4:	39 f0       	breq	.+14     	; 0x4c4 <part4+0x38>
			showMessage("Los numeros", "estan mal :C");
 4b6:	6d e0       	ldi	r22, 0x0D	; 13
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	8a e1       	ldi	r24, 0x1A	; 26
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 a7 01 	call	0x34e	; 0x34e <showMessage>
			return;
 4c2:	5a c0       	rjmp	.+180    	; 0x578 <part4+0xec>
		ptr++;
	}		
}	

void part4() {
	for (uint8_t i =0; i < 5; i++) {
 4c4:	2f 5f       	subi	r18, 0xFF	; 255
 4c6:	25 30       	cpi	r18, 0x05	; 5
 4c8:	28 f3       	brcs	.-54     	; 0x494 <part4+0x8>
		if (guess[i]!=randoms[i]) {
			showMessage("Los numeros", "estan mal :C");
			return;
		}
	}
	cls();
 4ca:	0e 94 92 01 	call	0x324	; 0x324 <cls>
	lcd_gotoxy(0,0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("Muy bien!");
 4d6:	86 e2       	ldi	r24, 0x26	; 38
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
	lcd_gotoxy(0,1);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("Tardaste: ");	
 4e6:	80 e3       	ldi	r24, 0x30	; 48
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
	lcd_putc(centiseconds/1000+'0');
 4ee:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <centiseconds>
 4f2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <centiseconds+0x1>
 4f6:	68 ee       	ldi	r22, 0xE8	; 232
 4f8:	73 e0       	ldi	r23, 0x03	; 3
 4fa:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 4fe:	80 e3       	ldi	r24, 0x30	; 48
 500:	86 0f       	add	r24, r22
 502:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
	lcd_putc(centiseconds/100%10+'0');
 506:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <centiseconds>
 50a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <centiseconds+0x1>
 50e:	64 e6       	ldi	r22, 0x64	; 100
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 516:	cb 01       	movw	r24, r22
 518:	ca e0       	ldi	r28, 0x0A	; 10
 51a:	d0 e0       	ldi	r29, 0x00	; 0
 51c:	be 01       	movw	r22, r28
 51e:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 522:	80 5d       	subi	r24, 0xD0	; 208
 524:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
	lcd_putc(':');
 528:	8a e3       	ldi	r24, 0x3A	; 58
 52a:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
	lcd_putc(centiseconds/10%10+'0');
 52e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <centiseconds>
 532:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <centiseconds+0x1>
 536:	be 01       	movw	r22, r28
 538:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 53c:	cb 01       	movw	r24, r22
 53e:	be 01       	movw	r22, r28
 540:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 544:	80 5d       	subi	r24, 0xD0	; 208
 546:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
	lcd_putc(centiseconds%10+'0');
 54a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <centiseconds>
 54e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <centiseconds+0x1>
 552:	be 01       	movw	r22, r28
 554:	0e 94 29 03 	call	0x652	; 0x652 <__divmodhi4>
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
	lcd_puts("s");
 55e:	8c ec       	ldi	r24, 0xCC	; 204
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_puts>
 566:	2f ef       	ldi	r18, 0xFF	; 255
 568:	89 e6       	ldi	r24, 0x69	; 105
 56a:	98 e1       	ldi	r25, 0x18	; 24
 56c:	21 50       	subi	r18, 0x01	; 1
 56e:	80 40       	sbci	r24, 0x00	; 0
 570:	90 40       	sbci	r25, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <part4+0xe0>
 574:	00 c0       	rjmp	.+0      	; 0x576 <part4+0xea>
 576:	00 00       	nop
	_delay_ms(1000);
	
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <main>:
volatile int16_t ticks;
volatile int16_t centiseconds;

int main(void)
{
	setup();
 57e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <setup>
	
    while (1) {
		part1();
 582:	0e 94 c7 01 	call	0x38e	; 0x38e <part1>
		while((IN &INICIO)) ticks++;
 586:	09 c0       	rjmp	.+18     	; 0x59a <main+0x1c>
 588:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticks>
 58c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticks+0x1>
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ticks+0x1>
 596:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ticks>
 59a:	82 99       	sbic	0x10, 2	; 16
 59c:	f5 cf       	rjmp	.-22     	; 0x588 <main+0xa>
 59e:	2f e7       	ldi	r18, 0x7F	; 127
 5a0:	88 e3       	ldi	r24, 0x38	; 56
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x26>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x30>
 5ae:	00 00       	nop
		_delay_ms(50);
		part2();
 5b0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <part2>
		part3();
 5b4:	0e 94 23 02 	call	0x446	; 0x446 <part3>
		while((IN &DETENER));		
 5b8:	86 99       	sbic	0x10, 6	; 16
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <main+0x3a>
 5bc:	2f e7       	ldi	r18, 0x7F	; 127
 5be:	88 e3       	ldi	r24, 0x38	; 56
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	21 50       	subi	r18, 0x01	; 1
 5c4:	80 40       	sbci	r24, 0x00	; 0
 5c6:	90 40       	sbci	r25, 0x00	; 0
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <main+0x44>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x4e>
 5cc:	00 00       	nop
		_delay_ms(50);
		while(!(IN &DETENER));				
 5ce:	86 9b       	sbis	0x10, 6	; 16
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <main+0x50>
		cli(); 
 5d2:	f8 94       	cli
 5d4:	2f e7       	ldi	r18, 0x7F	; 127
 5d6:	88 e3       	ldi	r24, 0x38	; 56
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x5c>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x66>
 5e4:	00 00       	nop
		_delay_ms(50);
		
		part4();		
 5e6:	0e 94 46 02 	call	0x48c	; 0x48c <part4>
 5ea:	2f ef       	ldi	r18, 0xFF	; 255
 5ec:	89 e6       	ldi	r24, 0x69	; 105
 5ee:	98 e1       	ldi	r25, 0x18	; 24
 5f0:	21 50       	subi	r18, 0x01	; 1
 5f2:	80 40       	sbci	r24, 0x00	; 0
 5f4:	90 40       	sbci	r25, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x72>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x7c>
 5fa:	00 00       	nop
 5fc:	c2 cf       	rjmp	.-124    	; 0x582 <main+0x4>

000005fe <__vector_19>:
	lcd_puts("s");
	_delay_ms(1000);
	
}

ISR(TIMER0_COMP_vect) {
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
	ticks++;
 60c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticks>
 610:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticks+0x1>
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ticks+0x1>
 61a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ticks>
	if (ticks == 50) {
 61e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticks>
 622:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticks+0x1>
 626:	c2 97       	sbiw	r24, 0x32	; 50
 628:	69 f4       	brne	.+26     	; 0x644 <__vector_19+0x46>
		ticks=0;
 62a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <ticks+0x1>
 62e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <ticks>
		centiseconds++;
 632:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <centiseconds>
 636:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <centiseconds+0x1>
 63a:	01 96       	adiw	r24, 0x01	; 1
 63c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <centiseconds+0x1>
 640:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <centiseconds>
	}
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <__divmodhi4>:
 652:	97 fb       	bst	r25, 7
 654:	07 2e       	mov	r0, r23
 656:	16 f4       	brtc	.+4      	; 0x65c <__divmodhi4+0xa>
 658:	00 94       	com	r0
 65a:	07 d0       	rcall	.+14     	; 0x66a <__divmodhi4_neg1>
 65c:	77 fd       	sbrc	r23, 7
 65e:	09 d0       	rcall	.+18     	; 0x672 <__divmodhi4_neg2>
 660:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodhi4>
 664:	07 fc       	sbrc	r0, 7
 666:	05 d0       	rcall	.+10     	; 0x672 <__divmodhi4_neg2>
 668:	3e f4       	brtc	.+14     	; 0x678 <__divmodhi4_exit>

0000066a <__divmodhi4_neg1>:
 66a:	90 95       	com	r25
 66c:	81 95       	neg	r24
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	08 95       	ret

00000672 <__divmodhi4_neg2>:
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255

00000678 <__divmodhi4_exit>:
 678:	08 95       	ret

0000067a <__udivmodhi4>:
 67a:	aa 1b       	sub	r26, r26
 67c:	bb 1b       	sub	r27, r27
 67e:	51 e1       	ldi	r21, 0x11	; 17
 680:	07 c0       	rjmp	.+14     	; 0x690 <__udivmodhi4_ep>

00000682 <__udivmodhi4_loop>:
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	a6 17       	cp	r26, r22
 688:	b7 07       	cpc	r27, r23
 68a:	10 f0       	brcs	.+4      	; 0x690 <__udivmodhi4_ep>
 68c:	a6 1b       	sub	r26, r22
 68e:	b7 0b       	sbc	r27, r23

00000690 <__udivmodhi4_ep>:
 690:	88 1f       	adc	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	5a 95       	dec	r21
 696:	a9 f7       	brne	.-22     	; 0x682 <__udivmodhi4_loop>
 698:	80 95       	com	r24
 69a:	90 95       	com	r25
 69c:	bc 01       	movw	r22, r24
 69e:	cd 01       	movw	r24, r26
 6a0:	08 95       	ret

000006a2 <do_rand>:
 6a2:	8f 92       	push	r8
 6a4:	9f 92       	push	r9
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	ec 01       	movw	r28, r24
 6b8:	68 81       	ld	r22, Y
 6ba:	79 81       	ldd	r23, Y+1	; 0x01
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	9b 81       	ldd	r25, Y+3	; 0x03
 6c0:	61 15       	cp	r22, r1
 6c2:	71 05       	cpc	r23, r1
 6c4:	81 05       	cpc	r24, r1
 6c6:	91 05       	cpc	r25, r1
 6c8:	21 f4       	brne	.+8      	; 0x6d2 <do_rand+0x30>
 6ca:	64 e2       	ldi	r22, 0x24	; 36
 6cc:	79 ed       	ldi	r23, 0xD9	; 217
 6ce:	8b e5       	ldi	r24, 0x5B	; 91
 6d0:	97 e0       	ldi	r25, 0x07	; 7
 6d2:	2d e1       	ldi	r18, 0x1D	; 29
 6d4:	33 ef       	ldi	r19, 0xF3	; 243
 6d6:	41 e0       	ldi	r20, 0x01	; 1
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodsi4>
 6de:	49 01       	movw	r8, r18
 6e0:	5a 01       	movw	r10, r20
 6e2:	9b 01       	movw	r18, r22
 6e4:	ac 01       	movw	r20, r24
 6e6:	a7 ea       	ldi	r26, 0xA7	; 167
 6e8:	b1 e4       	ldi	r27, 0x41	; 65
 6ea:	0e 94 cc 03 	call	0x798	; 0x798 <__muluhisi3>
 6ee:	6b 01       	movw	r12, r22
 6f0:	7c 01       	movw	r14, r24
 6f2:	ac ee       	ldi	r26, 0xEC	; 236
 6f4:	b4 ef       	ldi	r27, 0xF4	; 244
 6f6:	a5 01       	movw	r20, r10
 6f8:	94 01       	movw	r18, r8
 6fa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulohisi3>
 6fe:	dc 01       	movw	r26, r24
 700:	cb 01       	movw	r24, r22
 702:	8c 0d       	add	r24, r12
 704:	9d 1d       	adc	r25, r13
 706:	ae 1d       	adc	r26, r14
 708:	bf 1d       	adc	r27, r15
 70a:	b7 ff       	sbrs	r27, 7
 70c:	03 c0       	rjmp	.+6      	; 0x714 <do_rand+0x72>
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	a1 09       	sbc	r26, r1
 712:	b0 48       	sbci	r27, 0x80	; 128
 714:	88 83       	st	Y, r24
 716:	99 83       	std	Y+1, r25	; 0x01
 718:	aa 83       	std	Y+2, r26	; 0x02
 71a:	bb 83       	std	Y+3, r27	; 0x03
 71c:	9f 77       	andi	r25, 0x7F	; 127
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	cf 90       	pop	r12
 72a:	bf 90       	pop	r11
 72c:	af 90       	pop	r10
 72e:	9f 90       	pop	r9
 730:	8f 90       	pop	r8
 732:	08 95       	ret

00000734 <rand_r>:
 734:	0e 94 51 03 	call	0x6a2	; 0x6a2 <do_rand>
 738:	08 95       	ret

0000073a <rand>:
 73a:	80 e6       	ldi	r24, 0x60	; 96
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <do_rand>
 742:	08 95       	ret

00000744 <srand>:
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 74c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 750:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 754:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 758:	08 95       	ret

0000075a <__divmodsi4>:
 75a:	05 2e       	mov	r0, r21
 75c:	97 fb       	bst	r25, 7
 75e:	1e f4       	brtc	.+6      	; 0x766 <__divmodsi4+0xc>
 760:	00 94       	com	r0
 762:	0e 94 c4 03 	call	0x788	; 0x788 <__negsi2>
 766:	57 fd       	sbrc	r21, 7
 768:	07 d0       	rcall	.+14     	; 0x778 <__divmodsi4_neg2>
 76a:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
 76e:	07 fc       	sbrc	r0, 7
 770:	03 d0       	rcall	.+6      	; 0x778 <__divmodsi4_neg2>
 772:	4e f4       	brtc	.+18     	; 0x786 <__divmodsi4_exit>
 774:	0c 94 c4 03 	jmp	0x788	; 0x788 <__negsi2>

00000778 <__divmodsi4_neg2>:
 778:	50 95       	com	r21
 77a:	40 95       	com	r20
 77c:	30 95       	com	r19
 77e:	21 95       	neg	r18
 780:	3f 4f       	sbci	r19, 0xFF	; 255
 782:	4f 4f       	sbci	r20, 0xFF	; 255
 784:	5f 4f       	sbci	r21, 0xFF	; 255

00000786 <__divmodsi4_exit>:
 786:	08 95       	ret

00000788 <__negsi2>:
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__muluhisi3>:
 798:	0e 94 01 04 	call	0x802	; 0x802 <__umulhisi3>
 79c:	a5 9f       	mul	r26, r21
 79e:	90 0d       	add	r25, r0
 7a0:	b4 9f       	mul	r27, r20
 7a2:	90 0d       	add	r25, r0
 7a4:	a4 9f       	mul	r26, r20
 7a6:	80 0d       	add	r24, r0
 7a8:	91 1d       	adc	r25, r1
 7aa:	11 24       	eor	r1, r1
 7ac:	08 95       	ret

000007ae <__mulshisi3>:
 7ae:	b7 ff       	sbrs	r27, 7
 7b0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__muluhisi3>

000007b4 <__mulohisi3>:
 7b4:	0e 94 cc 03 	call	0x798	; 0x798 <__muluhisi3>
 7b8:	82 1b       	sub	r24, r18
 7ba:	93 0b       	sbc	r25, r19
 7bc:	08 95       	ret

000007be <__udivmodsi4>:
 7be:	a1 e2       	ldi	r26, 0x21	; 33
 7c0:	1a 2e       	mov	r1, r26
 7c2:	aa 1b       	sub	r26, r26
 7c4:	bb 1b       	sub	r27, r27
 7c6:	fd 01       	movw	r30, r26
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <__udivmodsi4_ep>

000007ca <__udivmodsi4_loop>:
 7ca:	aa 1f       	adc	r26, r26
 7cc:	bb 1f       	adc	r27, r27
 7ce:	ee 1f       	adc	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	a2 17       	cp	r26, r18
 7d4:	b3 07       	cpc	r27, r19
 7d6:	e4 07       	cpc	r30, r20
 7d8:	f5 07       	cpc	r31, r21
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__udivmodsi4_ep>
 7dc:	a2 1b       	sub	r26, r18
 7de:	b3 0b       	sbc	r27, r19
 7e0:	e4 0b       	sbc	r30, r20
 7e2:	f5 0b       	sbc	r31, r21

000007e4 <__udivmodsi4_ep>:
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	1a 94       	dec	r1
 7ee:	69 f7       	brne	.-38     	; 0x7ca <__udivmodsi4_loop>
 7f0:	60 95       	com	r22
 7f2:	70 95       	com	r23
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	9b 01       	movw	r18, r22
 7fa:	ac 01       	movw	r20, r24
 7fc:	bd 01       	movw	r22, r26
 7fe:	cf 01       	movw	r24, r30
 800:	08 95       	ret

00000802 <__umulhisi3>:
 802:	a2 9f       	mul	r26, r18
 804:	b0 01       	movw	r22, r0
 806:	b3 9f       	mul	r27, r19
 808:	c0 01       	movw	r24, r0
 80a:	a3 9f       	mul	r26, r19
 80c:	70 0d       	add	r23, r0
 80e:	81 1d       	adc	r24, r1
 810:	11 24       	eor	r1, r1
 812:	91 1d       	adc	r25, r1
 814:	b2 9f       	mul	r27, r18
 816:	70 0d       	add	r23, r0
 818:	81 1d       	adc	r24, r1
 81a:	11 24       	eor	r1, r1
 81c:	91 1d       	adc	r25, r1
 81e:	08 95       	ret

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
