
SoundTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  0000014e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000e0  008000e0  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000707  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000600  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a6  00000000  00000000  00000ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000343  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

volatile uint8_t idx;

int main(void)
{
	idx =0;
  92:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__data_end>
	OCR0 = 141 ;
  96:	8d e8       	ldi	r24, 0x8D	; 141
  98:	8c bf       	out	0x3c, r24	; 60
	// Activate TIMSK interrupts
	//TIMSK = (1<<TOIE0);
	// Lets do a clock at  8 preescaler => 488 hz (Close-ish to 440) With non-inverted OC0
	TCCR0 = TIMER0_CTC | PSCLR0_8 | (1<<COM00);
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	83 bf       	out	0x33, r24	; 51
	sei(); 
  9e:	78 94       	sei
	DDRB |= (1<<3);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	87 bb       	out	0x17, r24	; 23
	DDRD |= 1;
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1;
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	82 bb       	out	0x12, r24	; 18
	int8_t cnt =0;
  b2:	90 e0       	ldi	r25, 0x00	; 0
    while (1) {
		if (sine[cnt]==0) {		
  b4:	e9 2f       	mov	r30, r25
  b6:	09 2e       	mov	r0, r25
  b8:	00 0c       	add	r0, r0
  ba:	ff 0b       	sbc	r31, r31
  bc:	e0 5a       	subi	r30, 0xA0	; 160
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 81       	ld	r24, Z
  c2:	81 11       	cpse	r24, r1
  c4:	0f c0       	rjmp	.+30     	; 0xe4 <main+0x52>
			cnt++;	
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	89 0f       	add	r24, r25
			cnt%= notes;
  ca:	6e e4       	ldi	r22, 0x4E	; 78
  cc:	0e 94 8b 00 	call	0x116	; 0x116 <__divmodqi4>
			TCCR0 &= ~(1<<COM00);
  d0:	83 b7       	in	r24, 0x33	; 51
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	83 bf       	out	0x33, r24	; 51
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	ef e4       	ldi	r30, 0x4F	; 79
  d8:	f3 ec       	ldi	r31, 0xC3	; 195
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x48>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4e>
  e0:	00 00       	nop
  e2:	15 c0       	rjmp	.+42     	; 0x10e <main+0x7c>
			_delay_ms(200);
		} else {
			OCR0 = sine[cnt];
  e4:	8c bf       	out	0x3c, r24	; 60
			cnt++;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 0f       	add	r24, r25
			cnt %= notes;
  ea:	6e e4       	ldi	r22, 0x4E	; 78
  ec:	0e 94 8b 00 	call	0x116	; 0x116 <__divmodqi4>
  f0:	eb e7       	ldi	r30, 0x7B	; 123
  f2:	f2 e9       	ldi	r31, 0x92	; 146
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x62>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x68>
  fa:	00 00       	nop
			_delay_ms(150);
		
			TCCR0 &= ~(1<<COM00);
  fc:	83 b7       	in	r24, 0x33	; 51
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	83 bf       	out	0x33, r24	; 51
 102:	e3 ed       	ldi	r30, 0xD3	; 211
 104:	f0 e3       	ldi	r31, 0x30	; 48
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x74>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x7a>
 10c:	00 00       	nop
			_delay_ms(50);
		}
		TCCR0 |= (1<<COM00);
 10e:	83 b7       	in	r24, 0x33	; 51
 110:	80 61       	ori	r24, 0x10	; 16
 112:	83 bf       	out	0x33, r24	; 51
		//_delay_ms(200);
    }
 114:	cf cf       	rjmp	.-98     	; 0xb4 <main+0x22>

00000116 <__divmodqi4>:
 116:	87 fb       	bst	r24, 7
 118:	08 2e       	mov	r0, r24
 11a:	06 26       	eor	r0, r22
 11c:	87 fd       	sbrc	r24, 7
 11e:	81 95       	neg	r24
 120:	67 fd       	sbrc	r22, 7
 122:	61 95       	neg	r22
 124:	0e 94 99 00 	call	0x132	; 0x132 <__udivmodqi4>
 128:	0e f4       	brtc	.+2      	; 0x12c <__divmodqi4_1>
 12a:	91 95       	neg	r25

0000012c <__divmodqi4_1>:
 12c:	07 fc       	sbrc	r0, 7
 12e:	81 95       	neg	r24

00000130 <__divmodqi4_exit>:
 130:	08 95       	ret

00000132 <__udivmodqi4>:
 132:	99 1b       	sub	r25, r25
 134:	79 e0       	ldi	r23, 0x09	; 9
 136:	04 c0       	rjmp	.+8      	; 0x140 <__udivmodqi4_ep>

00000138 <__udivmodqi4_loop>:
 138:	99 1f       	adc	r25, r25
 13a:	96 17       	cp	r25, r22
 13c:	08 f0       	brcs	.+2      	; 0x140 <__udivmodqi4_ep>
 13e:	96 1b       	sub	r25, r22

00000140 <__udivmodqi4_ep>:
 140:	88 1f       	adc	r24, r24
 142:	7a 95       	dec	r23
 144:	c9 f7       	brne	.-14     	; 0x138 <__udivmodqi4_loop>
 146:	80 95       	com	r24
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
