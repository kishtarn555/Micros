
MemoryGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  00001190  00001204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018bd  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a7d  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c59  00000000  00000000  00003872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  000044cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000565  00000000  00000000  00004700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fba  00000000  00000000  00004c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00005c1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
      7a:	0c 94 c6 08 	jmp	0x118c	; 0x118c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keyboardInit>:

void keyboardInit(void) {
	#if KB_READWRITEMODE == 1
		DDRKB = 0b00001111;
	#else
		DDRKB = 0b11110000;
      82:	80 ef       	ldi	r24, 0xF0	; 240
      84:	8a bb       	out	0x1a, r24	; 26
	#endif
	PORTKB = 255;
      86:	8f ef       	ldi	r24, 0xFF	; 255
      88:	8b bb       	out	0x1b, r24	; 27
      8a:	08 95       	ret

0000008c <keyboardRead>:

uint8_t keyboardRead() {
	uint8_t response =1;	
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
      8c:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	PORTKB = 255;
}

uint8_t keyboardRead() {
	uint8_t response =1;	
      8e:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
      90:	29 c0       	rjmp	.+82     	; 0xe4 <keyboardRead+0x58>
		PORTKB = 255 ^ kb_out(i);
      92:	47 e0       	ldi	r20, 0x07	; 7
      94:	50 e0       	ldi	r21, 0x00	; 0
      96:	49 1b       	sub	r20, r25
      98:	51 09       	sbc	r21, r1
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <keyboardRead+0x18>
      a0:	22 0f       	add	r18, r18
      a2:	33 1f       	adc	r19, r19
      a4:	4a 95       	dec	r20
      a6:	e2 f7       	brpl	.-8      	; 0xa0 <keyboardRead+0x14>
      a8:	20 95       	com	r18
      aa:	2b bb       	out	0x1b, r18	; 27
		asm("nop");
      ac:	00 00       	nop
		test = PINKB & kb_readpins;
      ae:	29 b3       	in	r18, 0x19	; 25
      b0:	32 2f       	mov	r19, r18
      b2:	3f 70       	andi	r19, 0x0F	; 15
		if (test != kb_readpins) {
      b4:	3f 30       	cpi	r19, 0x0F	; 15
      b6:	a1 f0       	breq	.+40     	; 0xe0 <keyboardRead+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b8:	e3 ed       	ldi	r30, 0xD3	; 211
      ba:	f0 e3       	ldi	r31, 0x30	; 48
      bc:	31 97       	sbiw	r30, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <keyboardRead+0x30>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <keyboardRead+0x36>
      c2:	00 00       	nop
			_delay_ms(50);
			if (!(test & kb_read0))
      c4:	23 ff       	sbrs	r18, 3
      c6:	11 c0       	rjmp	.+34     	; 0xea <keyboardRead+0x5e>
				return response;
			if (!(test & kb_read1))
      c8:	22 fd       	sbrc	r18, 2
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <keyboardRead+0x44>
				return response+1;				
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	08 95       	ret
			if (!(test & kb_read2))
      d0:	21 fd       	sbrc	r18, 1
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <keyboardRead+0x4c>
				return response+2;				
      d4:	8e 5f       	subi	r24, 0xFE	; 254
      d6:	08 95       	ret
			if (!(test & kb_read3))
      d8:	20 fd       	sbrc	r18, 0
      da:	02 c0       	rjmp	.+4      	; 0xe0 <keyboardRead+0x54>
				return response+3;
      dc:	8d 5f       	subi	r24, 0xFD	; 253
      de:	08 95       	ret
		}
		response+=4;
      e0:	8c 5f       	subi	r24, 0xFC	; 252

uint8_t keyboardRead() {
	uint8_t response =1;	
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
      e2:	9f 5f       	subi	r25, 0xFF	; 255
      e4:	94 30       	cpi	r25, 0x04	; 4
      e6:	a8 f2       	brcs	.-86     	; 0x92 <keyboardRead+0x6>
			if (!(test & kb_read3))
				return response+3;
		}
		response+=4;
	}
	return 0;
      e8:	80 e0       	ldi	r24, 0x00	; 0
}
      ea:	08 95       	ret

000000ec <keyboardHoldUntilOff>:

void keyboardHoldUntilOff() {
	while (keyboardRead()) {;}
      ec:	0e 94 46 00 	call	0x8c	; 0x8c <keyboardRead>
      f0:	81 11       	cpse	r24, r1
      f2:	fc cf       	rjmp	.-8      	; 0xec <keyboardHoldUntilOff>
      f4:	83 ed       	ldi	r24, 0xD3	; 211
      f6:	90 e3       	ldi	r25, 0x30	; 48
      f8:	01 97       	sbiw	r24, 0x01	; 1
      fa:	f1 f7       	brne	.-4      	; 0xf8 <keyboardHoldUntilOff+0xc>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <keyboardHoldUntilOff+0x12>
      fe:	00 00       	nop
     100:	08 95       	ret

00000102 <keyboardReadOnRelease>:
	_delay_ms(50);
}

uint8_t keyboardReadOnRelease() {
     102:	cf 93       	push	r28
	uint8_t response =0;
	do {
		response = keyboardRead();
     104:	0e 94 46 00 	call	0x8c	; 0x8c <keyboardRead>
     108:	c8 2f       	mov	r28, r24
	} while (response==0);
     10a:	88 23       	and	r24, r24
     10c:	d9 f3       	breq	.-10     	; 0x104 <keyboardReadOnRelease+0x2>
	keyboardHoldUntilOff();
     10e:	0e 94 76 00 	call	0xec	; 0xec <keyboardHoldUntilOff>
	return response;
}
     112:	8c 2f       	mov	r24, r28
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <keyboardDecode>:

uint8_t keyboardDecode(const uint8_t keycode) {
	return KB_CODE_STR[keycode-1];
     118:	e8 2f       	mov	r30, r24
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	ed 59       	subi	r30, 0x9D	; 157
     11e:	ff 4f       	sbci	r31, 0xFF	; 255
     120:	80 81       	ld	r24, Z
     122:	08 95       	ret

00000124 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     124:	85 b3       	in	r24, 0x15	; 21
     126:	80 64       	ori	r24, 0x40	; 64
     128:	85 bb       	out	0x15, r24	; 21
     12a:	00 c0       	rjmp	.+0      	; 0x12c <toggle_e+0x8>
     12c:	85 b3       	in	r24, 0x15	; 21
     12e:	8f 7b       	andi	r24, 0xBF	; 191
     130:	85 bb       	out	0x15, r24	; 21
     132:	08 95       	ret

00000134 <lcd_write>:
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	d8 2f       	mov	r29, r24
     13a:	66 23       	and	r22, r22
     13c:	21 f0       	breq	.+8      	; 0x146 <lcd_write+0x12>
     13e:	85 b3       	in	r24, 0x15	; 21
     140:	80 61       	ori	r24, 0x10	; 16
     142:	85 bb       	out	0x15, r24	; 21
     144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_write+0x18>
     146:	85 b3       	in	r24, 0x15	; 21
     148:	8f 7e       	andi	r24, 0xEF	; 239
     14a:	85 bb       	out	0x15, r24	; 21
     14c:	85 b3       	in	r24, 0x15	; 21
     14e:	8f 7d       	andi	r24, 0xDF	; 223
     150:	85 bb       	out	0x15, r24	; 21
     152:	84 b3       	in	r24, 0x14	; 20
     154:	8f 60       	ori	r24, 0x0F	; 15
     156:	84 bb       	out	0x14, r24	; 20
     158:	c5 b3       	in	r28, 0x15	; 21
     15a:	c0 7f       	andi	r28, 0xF0	; 240
     15c:	8d 2f       	mov	r24, r29
     15e:	82 95       	swap	r24
     160:	8f 70       	andi	r24, 0x0F	; 15
     162:	8c 2b       	or	r24, r28
     164:	85 bb       	out	0x15, r24	; 21
     166:	0e 94 92 00 	call	0x124	; 0x124 <toggle_e>
     16a:	df 70       	andi	r29, 0x0F	; 15
     16c:	dc 2b       	or	r29, r28
     16e:	d5 bb       	out	0x15, r29	; 21
     170:	0e 94 92 00 	call	0x124	; 0x124 <toggle_e>
     174:	cf 60       	ori	r28, 0x0F	; 15
     176:	c5 bb       	out	0x15, r28	; 21
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <lcd_read>:
     17e:	88 23       	and	r24, r24
     180:	21 f0       	breq	.+8      	; 0x18a <lcd_read+0xc>
     182:	85 b3       	in	r24, 0x15	; 21
     184:	80 61       	ori	r24, 0x10	; 16
     186:	85 bb       	out	0x15, r24	; 21
     188:	03 c0       	rjmp	.+6      	; 0x190 <lcd_read+0x12>
     18a:	85 b3       	in	r24, 0x15	; 21
     18c:	8f 7e       	andi	r24, 0xEF	; 239
     18e:	85 bb       	out	0x15, r24	; 21
     190:	85 b3       	in	r24, 0x15	; 21
     192:	80 62       	ori	r24, 0x20	; 32
     194:	85 bb       	out	0x15, r24	; 21
     196:	84 b3       	in	r24, 0x14	; 20
     198:	80 7f       	andi	r24, 0xF0	; 240
     19a:	84 bb       	out	0x14, r24	; 20
     19c:	85 b3       	in	r24, 0x15	; 21
     19e:	80 64       	ori	r24, 0x40	; 64
     1a0:	85 bb       	out	0x15, r24	; 21
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_read+0x26>
     1a4:	93 b3       	in	r25, 0x13	; 19
     1a6:	92 95       	swap	r25
     1a8:	90 7f       	andi	r25, 0xF0	; 240
     1aa:	85 b3       	in	r24, 0x15	; 21
     1ac:	8f 7b       	andi	r24, 0xBF	; 191
     1ae:	85 bb       	out	0x15, r24	; 21
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_read+0x34>
     1b2:	85 b3       	in	r24, 0x15	; 21
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	85 bb       	out	0x15, r24	; 21
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_read+0x3c>
     1ba:	83 b3       	in	r24, 0x13	; 19
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	25 b3       	in	r18, 0x15	; 21
     1c0:	2f 7b       	andi	r18, 0xBF	; 191
     1c2:	25 bb       	out	0x15, r18	; 21
     1c4:	89 2b       	or	r24, r25
     1c6:	08 95       	ret

000001c8 <lcd_waitbusy>:
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_read>
     1ce:	88 23       	and	r24, r24
     1d0:	dc f3       	brlt	.-10     	; 0x1c8 <lcd_waitbusy>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_waitbusy+0xc>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_read>
     1da:	08 95       	ret

000001dc <lcd_command>:
     1dc:	cf 93       	push	r28
     1de:	c8 2f       	mov	r28, r24
     1e0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_waitbusy>
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	8c 2f       	mov	r24, r28
     1e8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <lcd_gotoxy>:
     1f0:	61 11       	cpse	r22, r1
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <lcd_gotoxy+0xc>
     1f4:	80 58       	subi	r24, 0x80	; 128
     1f6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     1fa:	08 95       	ret
     1fc:	80 54       	subi	r24, 0x40	; 64
     1fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     202:	08 95       	ret

00000204 <lcd_clrscr>:
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     20a:	08 95       	ret

0000020c <lcd_putc>:
     20c:	cf 93       	push	r28
     20e:	c8 2f       	mov	r28, r24
     210:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_waitbusy>
     214:	ca 30       	cpi	r28, 0x0A	; 10
     216:	49 f4       	brne	.+18     	; 0x22a <lcd_putc+0x1e>
     218:	80 34       	cpi	r24, 0x40	; 64
     21a:	10 f4       	brcc	.+4      	; 0x220 <lcd_putc+0x14>
     21c:	80 e4       	ldi	r24, 0x40	; 64
     21e:	01 c0       	rjmp	.+2      	; 0x222 <lcd_putc+0x16>
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	80 58       	subi	r24, 0x80	; 128
     224:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     228:	04 c0       	rjmp	.+8      	; 0x232 <lcd_putc+0x26>
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	8c 2f       	mov	r24, r28
     22e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <lcd_puts>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	fc 01       	movw	r30, r24
     23c:	03 c0       	rjmp	.+6      	; 0x244 <lcd_puts+0xe>
     23e:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_putc>
     242:	fe 01       	movw	r30, r28
     244:	ef 01       	movw	r28, r30
     246:	21 96       	adiw	r28, 0x01	; 1
     248:	80 81       	ld	r24, Z
     24a:	81 11       	cpse	r24, r1
     24c:	f8 cf       	rjmp	.-16     	; 0x23e <lcd_puts+0x8>
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     25c:	84 b3       	in	r24, 0x14	; 20
     25e:	8f 67       	ori	r24, 0x7F	; 127
     260:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     262:	80 ea       	ldi	r24, 0xA0	; 160
     264:	9f e0       	ldi	r25, 0x0F	; 15
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     26a:	85 b3       	in	r24, 0x15	; 21
     26c:	82 60       	ori	r24, 0x02	; 2
     26e:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     270:	85 b3       	in	r24, 0x15	; 21
     272:	81 60       	ori	r24, 0x01	; 1
     274:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
     276:	0e 94 92 00 	call	0x124	; 0x124 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     27a:	80 ee       	ldi	r24, 0xE0	; 224
     27c:	94 e0       	ldi	r25, 0x04	; 4
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     282:	0e 94 92 00 	call	0x124	; 0x124 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     286:	c0 e1       	ldi	r28, 0x10	; 16
     288:	d0 e0       	ldi	r29, 0x00	; 0
     28a:	ce 01       	movw	r24, r28
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     290:	0e 94 92 00 	call	0x124	; 0x124 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     294:	ce 01       	movw	r24, r28
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     29a:	85 b3       	in	r24, 0x15	; 21
     29c:	8e 7f       	andi	r24, 0xFE	; 254
     29e:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
     2a0:	0e 94 92 00 	call	0x124	; 0x124 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2a4:	21 97       	sbiw	r28, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     2a8:	88 e2       	ldi	r24, 0x28	; 40
     2aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     2b4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     2be:	81 2f       	mov	r24, r17
     2c0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>

}/* lcd_init */
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	08 95       	ret

000002cc <cls>:
#include <stdio.h>
#include <util/delay.h>
#include "lcd.h"
#include "keyboard.h"
void cls() {
	lcd_gotoxy(0, 0);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
	lcd_puts("                ");
     2d4:	85 e7       	ldi	r24, 0x75	; 117
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
	lcd_gotoxy(0, 1);
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
	lcd_puts("                ");
     2e4:	85 e7       	ldi	r24, 0x75	; 117
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
     2ec:	08 95       	ret

000002ee <printLines>:
}
void printLines(const char * a, const char * b ) {
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	8c 01       	movw	r16, r24
     2f8:	eb 01       	movw	r28, r22
	cls();
     2fa:	0e 94 66 01 	call	0x2cc	; 0x2cc <cls>
	lcd_gotoxy(0,0);
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
	lcd_puts(a);
     306:	c8 01       	movw	r24, r16
     308:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
	lcd_gotoxy(0,1);
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
	lcd_puts(b);
     314:	ce 01       	movw	r24, r28
     316:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <gbit>:

uint8_t gbit(uint16_t pos, uint16_t a, uint16_t b) {
	if (pos < 10) return (a & (1<<pos))?1:0;
     324:	8a 30       	cpi	r24, 0x0A	; 10
     326:	91 05       	cpc	r25, r1
     328:	78 f4       	brcc	.+30     	; 0x348 <gbit+0x24>
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	a9 01       	movw	r20, r18
     330:	02 c0       	rjmp	.+4      	; 0x336 <gbit+0x12>
     332:	44 0f       	add	r20, r20
     334:	55 1f       	adc	r21, r21
     336:	8a 95       	dec	r24
     338:	e2 f7       	brpl	.-8      	; 0x332 <gbit+0xe>
     33a:	64 23       	and	r22, r20
     33c:	75 23       	and	r23, r21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	67 2b       	or	r22, r23
     342:	89 f4       	brne	.+34     	; 0x366 <gbit+0x42>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	08 95       	ret
	return (b & (1<<(pos-10)))?1:0;
     348:	0a 97       	sbiw	r24, 0x0a	; 10
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	b9 01       	movw	r22, r18
     350:	02 c0       	rjmp	.+4      	; 0x356 <gbit+0x32>
     352:	66 0f       	add	r22, r22
     354:	77 1f       	adc	r23, r23
     356:	8a 95       	dec	r24
     358:	e2 f7       	brpl	.-8      	; 0x352 <gbit+0x2e>
     35a:	46 23       	and	r20, r22
     35c:	57 23       	and	r21, r23
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	45 2b       	or	r20, r21
     362:	09 f4       	brne	.+2      	; 0x366 <gbit+0x42>
     364:	80 e0       	ldi	r24, 0x00	; 0
}
     366:	08 95       	ret

00000368 <sbit>:

void sbit(uint16_t pos, uint16_t *a, uint16_t *b) {
	if (pos < 10) {
     368:	8a 30       	cpi	r24, 0x0A	; 10
     36a:	91 05       	cpc	r25, r1
     36c:	88 f4       	brcc	.+34     	; 0x390 <sbit+0x28>
		*a |= (1<<pos);
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	a9 01       	movw	r20, r18
     374:	02 c0       	rjmp	.+4      	; 0x37a <sbit+0x12>
     376:	44 0f       	add	r20, r20
     378:	55 1f       	adc	r21, r21
     37a:	8a 95       	dec	r24
     37c:	e2 f7       	brpl	.-8      	; 0x376 <sbit+0xe>
     37e:	ca 01       	movw	r24, r20
     380:	fb 01       	movw	r30, r22
     382:	20 81       	ld	r18, Z
     384:	31 81       	ldd	r19, Z+1	; 0x01
     386:	82 2b       	or	r24, r18
     388:	93 2b       	or	r25, r19
     38a:	91 83       	std	Z+1, r25	; 0x01
     38c:	80 83       	st	Z, r24
     38e:	08 95       	ret
	} else {
		*b |= (1<<(pos-10));
     390:	0a 97       	sbiw	r24, 0x0a	; 10
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	b9 01       	movw	r22, r18
     398:	02 c0       	rjmp	.+4      	; 0x39e <sbit+0x36>
     39a:	66 0f       	add	r22, r22
     39c:	77 1f       	adc	r23, r23
     39e:	8a 95       	dec	r24
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <sbit+0x32>
     3a2:	cb 01       	movw	r24, r22
     3a4:	fa 01       	movw	r30, r20
     3a6:	20 81       	ld	r18, Z
     3a8:	31 81       	ldd	r19, Z+1	; 0x01
     3aa:	82 2b       	or	r24, r18
     3ac:	93 2b       	or	r25, r19
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	80 83       	st	Z, r24
     3b2:	08 95       	ret

000003b4 <main>:
	}
}

int main(void)
{	
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	aa 97       	sbiw	r28, 0x2a	; 42
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
	DDRB=255;
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	87 bb       	out	0x17, r24	; 23
	PORTB=0;
     3cc:	18 ba       	out	0x18, r1	; 24
    lcd_init(LCD_DISP_ON);
     3ce:	8c e0       	ldi	r24, 0x0C	; 12
     3d0:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_init>
	keyboardInit();
     3d4:	0e 94 41 00 	call	0x82	; 0x82 <keyboardInit>
	uint8_t key =0;
	uint8_t hide=0;
	uint8_t seed =0;
	
	
	uint16_t UP = 0;
     3d8:	1c a2       	std	Y+36, r1	; 0x24
     3da:	1b a2       	std	Y+35, r1	; 0x23
	uint16_t LOW = 0;
     3dc:	1e a2       	std	Y+38, r1	; 0x26
     3de:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t VH = 0;
     3e0:	18 a6       	std	Y+40, r1	; 0x28
     3e2:	1f a2       	std	Y+39, r1	; 0x27
	uint16_t VL = 0;
     3e4:	1a a6       	std	Y+42, r1	; 0x2a
     3e6:	19 a6       	std	Y+41, r1	; 0x29
	char firstLine[17];
	char secondLine[17];
	uint8_t state =0;
	uint8_t key =0;
	uint8_t hide=0;
	uint8_t seed =0;
     3e8:	c1 2c       	mov	r12, r1
	keyboardInit();
	char firstLine[17];
	char secondLine[17];
	uint8_t state =0;
	uint8_t key =0;
	uint8_t hide=0;
     3ea:	f1 2c       	mov	r15, r1
	PORTB=0;
    lcd_init(LCD_DISP_ON);
	keyboardInit();
	char firstLine[17];
	char secondLine[17];
	uint8_t state =0;
     3ec:	e1 2c       	mov	r14, r1
	uint16_t LOW = 0;
	uint16_t VH = 0;
	uint16_t VL = 0;
	
    while (1) {
		if (state ==0) {
     3ee:	e1 10       	cpse	r14, r1
     3f0:	22 c0       	rjmp	.+68     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
			UP = LOW = 0;
     3f2:	1e a2       	std	Y+38, r1	; 0x26
     3f4:	1d a2       	std	Y+37, r1	; 0x25
     3f6:	1c a2       	std	Y+36, r1	; 0x24
     3f8:	1b a2       	std	Y+35, r1	; 0x23
			VH = VL = 0;
     3fa:	1a a6       	std	Y+42, r1	; 0x2a
     3fc:	19 a6       	std	Y+41, r1	; 0x29
     3fe:	18 a6       	std	Y+40, r1	; 0x28
     400:	1f a2       	std	Y+39, r1	; 0x27
			PORTB = 0;
     402:	18 ba       	out	0x18, r1	; 24
			cls();
     404:	0e 94 66 01 	call	0x2cc	; 0x2cc <cls>
			lcd_gotoxy(0, 0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
			lcd_puts("Cuantos cuadros?");
     410:	86 e8       	ldi	r24, 0x86	; 134
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
			do {
				seed++;
     418:	c3 94       	inc	r12
				key = keyboardDecode(keyboardReadOnRelease());
     41a:	0e 94 81 00 	call	0x102	; 0x102 <keyboardReadOnRelease>
     41e:	0e 94 8c 00 	call	0x118	; 0x118 <keyboardDecode>
			} while (key < '0' || key > '9');
     422:	0f 2e       	mov	r0, r31
     424:	f0 ed       	ldi	r31, 0xD0	; 208
     426:	ff 2e       	mov	r15, r31
     428:	f0 2d       	mov	r31, r0
     42a:	f8 0e       	add	r15, r24
     42c:	29 e0       	ldi	r18, 0x09	; 9
     42e:	2f 15       	cp	r18, r15
     430:	98 f3       	brcs	.-26     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
			hide = key-'0';
			state++;
     432:	e3 94       	inc	r14
			continue;
     434:	dc cf       	rjmp	.-72     	; 0x3ee <main+0x3a>
		}
		if (state == 1) {
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	e8 12       	cpse	r14, r24
     43a:	84 c0       	rjmp	.+264    	; 0x544 <__stack+0xe5>
			srand(seed);
     43c:	8c 2d       	mov	r24, r12
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 6e 05 	call	0xadc	; 0xadc <srand>
			sprintf(firstLine, "Escondere %d", hide);
     444:	1f 92       	push	r1
     446:	ff 92       	push	r15
     448:	87 e9       	ldi	r24, 0x97	; 151
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	ce 01       	movw	r24, r28
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	5c 01       	movw	r10, r24
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
			sprintf(secondLine, "cuadritos");
     45e:	8e 01       	movw	r16, r28
     460:	0e 5e       	subi	r16, 0xEE	; 238
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	8a e0       	ldi	r24, 0x0A	; 10
     466:	e4 ea       	ldi	r30, 0xA4	; 164
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	d8 01       	movw	r26, r16
     46c:	01 90       	ld	r0, Z+
     46e:	0d 92       	st	X+, r0
     470:	8a 95       	dec	r24
     472:	e1 f7       	brne	.-8      	; 0x46c <__stack+0xd>
			printLines(firstLine, secondLine);		
     474:	b8 01       	movw	r22, r16
     476:	c5 01       	movw	r24, r10
     478:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     47c:	9f eb       	ldi	r25, 0xBF	; 191
     47e:	27 e2       	ldi	r18, 0x27	; 39
     480:	89 e0       	ldi	r24, 0x09	; 9
     482:	91 50       	subi	r25, 0x01	; 1
     484:	20 40       	sbci	r18, 0x00	; 0
     486:	80 40       	sbci	r24, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <__stack+0x23>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <__stack+0x2d>
     48c:	00 00       	nop
			_delay_ms(3000);
			
			sprintf(firstLine, "Tu debes buscar");
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	ee ea       	ldi	r30, 0xAE	; 174
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	d5 01       	movw	r26, r10
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	8a 95       	dec	r24
     49c:	e1 f7       	brne	.-8      	; 0x496 <__stack+0x37>
			sprintf(secondLine, "%d cuadritos.", hide);
     49e:	1f 92       	push	r1
     4a0:	ff 92       	push	r15
     4a2:	8e eb       	ldi	r24, 0xBE	; 190
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	1f 93       	push	r17
     4ac:	0f 93       	push	r16
     4ae:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
			printLines(firstLine, secondLine);
     4b2:	b8 01       	movw	r22, r16
     4b4:	c5 01       	movw	r24, r10
     4b6:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     4ba:	9f eb       	ldi	r25, 0xBF	; 191
     4bc:	27 e2       	ldi	r18, 0x27	; 39
     4be:	89 e0       	ldi	r24, 0x09	; 9
     4c0:	91 50       	subi	r25, 0x01	; 1
     4c2:	20 40       	sbci	r18, 0x00	; 0
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__stack+0x61>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__stack+0x6b>
     4ca:	00 00       	nop
			_delay_ms(3000);
			
			sprintf(firstLine, "2 filas (1, 2)");
     4cc:	8f e0       	ldi	r24, 0x0F	; 15
     4ce:	ec ec       	ldi	r30, 0xCC	; 204
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	d5 01       	movw	r26, r10
     4d4:	01 90       	ld	r0, Z+
     4d6:	0d 92       	st	X+, r0
     4d8:	8a 95       	dec	r24
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <__stack+0x75>
			sprintf(secondLine, "10 cols (0-9)");
     4dc:	8e e0       	ldi	r24, 0x0E	; 14
     4de:	eb ed       	ldi	r30, 0xDB	; 219
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	d8 01       	movw	r26, r16
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	8a 95       	dec	r24
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__stack+0x85>
			printLines(firstLine, secondLine);
     4ec:	b8 01       	movw	r22, r16
     4ee:	c5 01       	movw	r24, r10
     4f0:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     4f4:	9f eb       	ldi	r25, 0xBF	; 191
     4f6:	27 e2       	ldi	r18, 0x27	; 39
     4f8:	89 e0       	ldi	r24, 0x09	; 9
     4fa:	91 50       	subi	r25, 0x01	; 1
     4fc:	20 40       	sbci	r18, 0x00	; 0
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	e1 f7       	brne	.-8      	; 0x4fa <__stack+0x9b>
     502:	00 c0       	rjmp	.+0      	; 0x504 <__stack+0xa5>
     504:	00 00       	nop
			_delay_ms(3000);
			
			sprintf(firstLine, "Presiona +");
     506:	8b e0       	ldi	r24, 0x0B	; 11
     508:	e9 ee       	ldi	r30, 0xE9	; 233
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	d5 01       	movw	r26, r10
     50e:	01 90       	ld	r0, Z+
     510:	0d 92       	st	X+, r0
     512:	8a 95       	dec	r24
     514:	e1 f7       	brne	.-8      	; 0x50e <__stack+0xaf>
			sprintf(secondLine, "para continuar...");
     516:	82 e1       	ldi	r24, 0x12	; 18
     518:	e4 ef       	ldi	r30, 0xF4	; 244
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	d8 01       	movw	r26, r16
     51e:	01 90       	ld	r0, Z+
     520:	0d 92       	st	X+, r0
     522:	8a 95       	dec	r24
     524:	e1 f7       	brne	.-8      	; 0x51e <__stack+0xbf>
			printLines(firstLine, secondLine);			
     526:	b8 01       	movw	r22, r16
     528:	c5 01       	movw	r24, r10
     52a:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
			while (keyboardReadOnRelease()!=16);
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	0e 94 81 00 	call	0x102	; 0x102 <keyboardReadOnRelease>
     53c:	80 31       	cpi	r24, 0x10	; 16
     53e:	e1 f7       	brne	.-8      	; 0x538 <__stack+0xd9>
			state++;
     540:	e3 94       	inc	r14
			continue;			
     542:	55 cf       	rjmp	.-342    	; 0x3ee <main+0x3a>
		}
		if (state == 2) {
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	e9 12       	cpse	r14, r25
     548:	ca c0       	rjmp	.+404    	; 0x6de <__stack+0x27f>
			sprintf(firstLine, "Trata de");
     54a:	89 e0       	ldi	r24, 0x09	; 9
     54c:	e6 e0       	ldi	r30, 0x06	; 6
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	8e 01       	movw	r16, r28
     552:	0f 5f       	subi	r16, 0xFF	; 255
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	d8 01       	movw	r26, r16
     558:	01 90       	ld	r0, Z+
     55a:	0d 92       	st	X+, r0
     55c:	8a 95       	dec	r24
     55e:	e1 f7       	brne	.-8      	; 0x558 <__stack+0xf9>
			sprintf(secondLine, "memorizar...");
     560:	8d e0       	ldi	r24, 0x0D	; 13
     562:	ef e0       	ldi	r30, 0x0F	; 15
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	de 01       	movw	r26, r28
     568:	52 96       	adiw	r26, 0x12	; 18
     56a:	01 90       	ld	r0, Z+
     56c:	0d 92       	st	X+, r0
     56e:	8a 95       	dec	r24
     570:	e1 f7       	brne	.-8      	; 0x56a <__stack+0x10b>
			printLines(firstLine, secondLine);
     572:	be 01       	movw	r22, r28
     574:	6e 5e       	subi	r22, 0xEE	; 238
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	c8 01       	movw	r24, r16
     57a:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     57e:	2f eb       	ldi	r18, 0xBF	; 191
     580:	87 e2       	ldi	r24, 0x27	; 39
     582:	99 e0       	ldi	r25, 0x09	; 9
     584:	21 50       	subi	r18, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <__stack+0x125>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x12f>
     58e:	00 00       	nop
			_delay_ms(3000);
			
			sprintf(firstLine, "Tienes %02d", 2*hide);
     590:	8f 2d       	mov	r24, r15
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	8c e1       	ldi	r24, 0x1C	; 28
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	1f 93       	push	r17
     5a6:	0f 93       	push	r16
     5a8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
			sprintf(secondLine, "Intentos");
     5ac:	89 e0       	ldi	r24, 0x09	; 9
     5ae:	e8 e2       	ldi	r30, 0x28	; 40
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	de 01       	movw	r26, r28
     5b4:	52 96       	adiw	r26, 0x12	; 18
     5b6:	01 90       	ld	r0, Z+
     5b8:	0d 92       	st	X+, r0
     5ba:	8a 95       	dec	r24
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <__stack+0x157>
			printLines(firstLine, secondLine);
     5be:	be 01       	movw	r22, r28
     5c0:	6e 5e       	subi	r22, 0xEE	; 238
     5c2:	7f 4f       	sbci	r23, 0xFF	; 255
     5c4:	c8 01       	movw	r24, r16
     5c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     5ca:	2f eb       	ldi	r18, 0xBF	; 191
     5cc:	87 e2       	ldi	r24, 0x27	; 39
     5ce:	99 e0       	ldi	r25, 0x09	; 9
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <__stack+0x171>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <__stack+0x17b>
     5da:	00 00       	nop
			_delay_ms(3000);
			
			uint8_t coord=0;
			for (uint8_t i =0;i < hide; i++) {
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	d1 2c       	mov	r13, r1
			sprintf(firstLine, "Tienes %02d", 2*hide);
			sprintf(secondLine, "Intentos");
			printLines(firstLine, secondLine);
			_delay_ms(3000);
			
			uint8_t coord=0;
     5ea:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i =0;i < hide; i++) {
     5ec:	73 c0       	rjmp	.+230    	; 0x6d4 <__stack+0x275>
				uint8_t step = 1+rand()%20;
     5ee:	0e 94 69 05 	call	0xad2	; 0xad2 <rand>
     5f2:	64 e1       	ldi	r22, 0x14	; 20
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__divmodhi4>
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
				while (step--) {
     5fc:	1b c0       	rjmp	.+54     	; 0x634 <__stack+0x1d5>
					do  {
						coord++;
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	91 0f       	add	r25, r17
						coord%=20;
     602:	1d ec       	ldi	r17, 0xCD	; 205
     604:	91 9f       	mul	r25, r17
     606:	11 2d       	mov	r17, r1
     608:	11 24       	eor	r1, r1
     60a:	12 95       	swap	r17
     60c:	1f 70       	andi	r17, 0x0F	; 15
     60e:	11 0f       	add	r17, r17
     610:	11 0f       	add	r17, r17
     612:	81 2f       	mov	r24, r17
     614:	88 0f       	add	r24, r24
     616:	88 0f       	add	r24, r24
     618:	18 0f       	add	r17, r24
     61a:	91 1b       	sub	r25, r17
     61c:	19 2f       	mov	r17, r25
					}while (gbit(coord, LOW, UP));
     61e:	4b a1       	ldd	r20, Y+35	; 0x23
     620:	5c a1       	ldd	r21, Y+36	; 0x24
     622:	6d a1       	ldd	r22, Y+37	; 0x25
     624:	7e a1       	ldd	r23, Y+38	; 0x26
     626:	89 2f       	mov	r24, r25
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 92 01 	call	0x324	; 0x324 <gbit>
     62e:	81 11       	cpse	r24, r1
     630:	e6 cf       	rjmp	.-52     	; 0x5fe <__stack+0x19f>
			_delay_ms(3000);
			
			uint8_t coord=0;
			for (uint8_t i =0;i < hide; i++) {
				uint8_t step = 1+rand()%20;
				while (step--) {
     632:	80 2f       	mov	r24, r16
     634:	0f ef       	ldi	r16, 0xFF	; 255
     636:	08 0f       	add	r16, r24
     638:	81 11       	cpse	r24, r1
     63a:	e1 cf       	rjmp	.-62     	; 0x5fe <__stack+0x19f>
					do  {
						coord++;
						coord%=20;
					}while (gbit(coord, LOW, UP));
				}
				sbit(coord, &LOW, &UP);
     63c:	ae 01       	movw	r20, r28
     63e:	4d 5d       	subi	r20, 0xDD	; 221
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	be 01       	movw	r22, r28
     644:	6b 5d       	subi	r22, 0xDB	; 219
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	81 2f       	mov	r24, r17
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 b4 01 	call	0x368	; 0x368 <sbit>
				sprintf(firstLine, "Cuadrito %d", i+1);
     650:	8d 2d       	mov	r24, r13
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	81 e3       	ldi	r24, 0x31	; 49
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	5c 01       	movw	r10, r24
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
				sprintf(secondLine, "%d, %d", coord/10, coord%10);
     670:	8d ec       	ldi	r24, 0xCD	; 205
     672:	18 9f       	mul	r17, r24
     674:	81 2d       	mov	r24, r1
     676:	11 24       	eor	r1, r1
     678:	86 95       	lsr	r24
     67a:	86 95       	lsr	r24
     67c:	86 95       	lsr	r24
     67e:	28 2f       	mov	r18, r24
     680:	22 0f       	add	r18, r18
     682:	92 2f       	mov	r25, r18
     684:	99 0f       	add	r25, r25
     686:	99 0f       	add	r25, r25
     688:	92 0f       	add	r25, r18
     68a:	21 2f       	mov	r18, r17
     68c:	29 1b       	sub	r18, r25
     68e:	1f 92       	push	r1
     690:	2f 93       	push	r18
     692:	1f 92       	push	r1
     694:	8f 93       	push	r24
     696:	8d e3       	ldi	r24, 0x3D	; 61
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	4e 01       	movw	r8, r28
     6a0:	82 e1       	ldi	r24, 0x12	; 18
     6a2:	88 0e       	add	r8, r24
     6a4:	91 1c       	adc	r9, r1
     6a6:	9f 92       	push	r9
     6a8:	8f 92       	push	r8
     6aa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
				printLines(firstLine, secondLine);
     6ae:	b4 01       	movw	r22, r8
     6b0:	c5 01       	movw	r24, r10
     6b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     6b6:	9f ee       	ldi	r25, 0xEF	; 239
     6b8:	29 e4       	ldi	r18, 0x49	; 73
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	91 50       	subi	r25, 0x01	; 1
     6be:	20 40       	sbci	r18, 0x00	; 0
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <__stack+0x25d>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <__stack+0x267>
     6c6:	00 00       	nop
			sprintf(secondLine, "Intentos");
			printLines(firstLine, secondLine);
			_delay_ms(3000);
			
			uint8_t coord=0;
			for (uint8_t i =0;i < hide; i++) {
     6c8:	d3 94       	inc	r13
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df 14       	cp	r13, r15
     6d6:	08 f4       	brcc	.+2      	; 0x6da <__stack+0x27b>
     6d8:	8a cf       	rjmp	.-236    	; 0x5ee <__stack+0x18f>
				sprintf(firstLine, "Cuadrito %d", i+1);
				sprintf(secondLine, "%d, %d", coord/10, coord%10);
				printLines(firstLine, secondLine);
				_delay_ms(750);
			}
			state++;
     6da:	e3 94       	inc	r14
			continue;
     6dc:	88 ce       	rjmp	.-752    	; 0x3ee <main+0x3a>
		}
		if (state == 3) {
     6de:	93 e0       	ldi	r25, 0x03	; 3
     6e0:	e9 12       	cpse	r14, r25
     6e2:	85 ce       	rjmp	.-758    	; 0x3ee <main+0x3a>
     6e4:	e4 c0       	rjmp	.+456    	; 0x8ae <__stack+0x44f>
			
			uint8_t attempts =0, found =0;
			uint8_t f= 0, c = 0;
			while (attempts < hide*2 && found < hide) {
				PORTB = found;
     6e6:	e8 ba       	out	0x18, r14	; 24
				sprintf(firstLine, "Intento %02d ", attempts+1);
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	84 e4       	ldi	r24, 0x44	; 68
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	5c 01       	movw	r10, r24
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
				cls();
     704:	0e 94 66 01 	call	0x2cc	; 0x2cc <cls>
				lcd_gotoxy(0,0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
				lcd_puts(firstLine);		
     710:	c5 01       	movw	r24, r10
     712:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
				if (f != 0) {
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	11 23       	and	r17, r17
     724:	99 f0       	breq	.+38     	; 0x74c <__stack+0x2ed>
					sprintf(firstLine, "(%c,", f);
     726:	1f 92       	push	r1
     728:	1f 93       	push	r17
     72a:	82 e5       	ldi	r24, 0x52	; 82
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	bf 92       	push	r11
     734:	af 92       	push	r10
     736:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
					lcd_puts(firstLine);
     73a:	c5 01       	movw	r24, r10
     73c:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
				}
				if (c != 0) {
     74c:	00 23       	and	r16, r16
     74e:	09 f4       	brne	.+2      	; 0x752 <__stack+0x2f3>
     750:	9e c0       	rjmp	.+316    	; 0x88e <__stack+0x42f>
					sprintf(firstLine, "%c)", c);
     752:	1f 92       	push	r1
     754:	0f 93       	push	r16
     756:	87 e5       	ldi	r24, 0x57	; 87
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	5c 01       	movw	r10, r24
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	0e 94 79 05 	call	0xaf2	; 0xaf2 <sprintf>
					lcd_puts(firstLine);
     76c:	c5 01       	movw	r24, r10
     76e:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
					
					if (f < '0' || f >'1' || c <'0' || c >'9') {
     772:	10 53       	subi	r17, 0x30	; 48
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	12 30       	cpi	r17, 0x02	; 2
     782:	20 f4       	brcc	.+8      	; 0x78c <__stack+0x32d>
     784:	00 33       	cpi	r16, 0x30	; 48
     786:	10 f0       	brcs	.+4      	; 0x78c <__stack+0x32d>
     788:	0a 33       	cpi	r16, 0x3A	; 58
     78a:	a8 f0       	brcs	.+42     	; 0x7b6 <__stack+0x357>
						lcd_gotoxy(0,1);
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
						lcd_puts("No existe lugar");
     794:	8b e5       	ldi	r24, 0x5B	; 91
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
						attempts++;
     79c:	d3 94       	inc	r13
     79e:	9f eb       	ldi	r25, 0xBF	; 191
     7a0:	27 e2       	ldi	r18, 0x27	; 39
     7a2:	89 e0       	ldi	r24, 0x09	; 9
     7a4:	91 50       	subi	r25, 0x01	; 1
     7a6:	20 40       	sbci	r18, 0x00	; 0
     7a8:	80 40       	sbci	r24, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <__stack+0x345>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <__stack+0x34f>
     7ae:	00 00       	nop
						f=c=0;
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	10 e0       	ldi	r17, 0x00	; 0
						_delay_ms(3000);
						continue;
     7b4:	80 c0       	rjmp	.+256    	; 0x8b6 <__stack+0x457>
					}
					f -='0';
					c -='0';
     7b6:	20 ed       	ldi	r18, 0xD0	; 208
     7b8:	20 0f       	add	r18, r16
					if (gbit(f*10+c, VL, VH)) {						
     7ba:	81 2f       	mov	r24, r17
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	8c 01       	movw	r16, r24
     7c0:	00 0f       	add	r16, r16
     7c2:	11 1f       	adc	r17, r17
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	80 0f       	add	r24, r16
     7d2:	91 1f       	adc	r25, r17
     7d4:	8c 01       	movw	r16, r24
     7d6:	02 0f       	add	r16, r18
     7d8:	11 1d       	adc	r17, r1
     7da:	4f a1       	ldd	r20, Y+39	; 0x27
     7dc:	58 a5       	ldd	r21, Y+40	; 0x28
     7de:	69 a5       	ldd	r22, Y+41	; 0x29
     7e0:	7a a5       	ldd	r23, Y+42	; 0x2a
     7e2:	c8 01       	movw	r24, r16
     7e4:	0e 94 92 01 	call	0x324	; 0x324 <gbit>
     7e8:	88 23       	and	r24, r24
     7ea:	a1 f0       	breq	.+40     	; 0x814 <__stack+0x3b5>
						lcd_gotoxy(0,1);
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
						lcd_puts("Ya estaba!");
     7f4:	8b e6       	ldi	r24, 0x6B	; 107
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
     7fc:	9f eb       	ldi	r25, 0xBF	; 191
     7fe:	27 e2       	ldi	r18, 0x27	; 39
     800:	89 e0       	ldi	r24, 0x09	; 9
     802:	91 50       	subi	r25, 0x01	; 1
     804:	20 40       	sbci	r18, 0x00	; 0
     806:	80 40       	sbci	r24, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <__stack+0x3a3>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__stack+0x3ad>
     80c:	00 00       	nop
						f=c=0;
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
						_delay_ms(3000);
						continue;
     812:	51 c0       	rjmp	.+162    	; 0x8b6 <__stack+0x457>
					}
					sbit(f*10+c,&VL, &VH);
     814:	ae 01       	movw	r20, r28
     816:	49 5d       	subi	r20, 0xD9	; 217
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	be 01       	movw	r22, r28
     81c:	67 5d       	subi	r22, 0xD7	; 215
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	c8 01       	movw	r24, r16
     822:	0e 94 b4 01 	call	0x368	; 0x368 <sbit>
					if (gbit(f*10+c, LOW, UP)) {
     826:	4b a1       	ldd	r20, Y+35	; 0x23
     828:	5c a1       	ldd	r21, Y+36	; 0x24
     82a:	6d a1       	ldd	r22, Y+37	; 0x25
     82c:	7e a1       	ldd	r23, Y+38	; 0x26
     82e:	c8 01       	movw	r24, r16
     830:	0e 94 92 01 	call	0x324	; 0x324 <gbit>
     834:	88 23       	and	r24, r24
     836:	b1 f0       	breq	.+44     	; 0x864 <__stack+0x405>
						lcd_gotoxy(0,1);
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
						lcd_puts("Acierto");
     840:	86 e7       	ldi	r24, 0x76	; 118
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
						attempts++;
     848:	d3 94       	inc	r13
						found++;
     84a:	e3 94       	inc	r14
     84c:	9f eb       	ldi	r25, 0xBF	; 191
     84e:	27 e2       	ldi	r18, 0x27	; 39
     850:	89 e0       	ldi	r24, 0x09	; 9
     852:	91 50       	subi	r25, 0x01	; 1
     854:	20 40       	sbci	r18, 0x00	; 0
     856:	80 40       	sbci	r24, 0x00	; 0
     858:	e1 f7       	brne	.-8      	; 0x852 <__stack+0x3f3>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <__stack+0x3fd>
     85c:	00 00       	nop
						f=c=0;
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	10 e0       	ldi	r17, 0x00	; 0
						_delay_ms(3000);
						continue;
     862:	29 c0       	rjmp	.+82     	; 0x8b6 <__stack+0x457>
					} else {
						lcd_gotoxy(0,1);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_gotoxy>
						lcd_puts("Error");
     86c:	8e e7       	ldi	r24, 0x7E	; 126
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_puts>
						attempts++;
     874:	d3 94       	inc	r13
     876:	9f eb       	ldi	r25, 0xBF	; 191
     878:	27 e2       	ldi	r18, 0x27	; 39
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	91 50       	subi	r25, 0x01	; 1
     87e:	20 40       	sbci	r18, 0x00	; 0
     880:	80 40       	sbci	r24, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <__stack+0x41d>
     884:	00 c0       	rjmp	.+0      	; 0x886 <__stack+0x427>
     886:	00 00       	nop
						f=c=0;						
     888:	00 e0       	ldi	r16, 0x00	; 0
     88a:	10 e0       	ldi	r17, 0x00	; 0
						_delay_ms(3000);
						continue;
     88c:	14 c0       	rjmp	.+40     	; 0x8b6 <__stack+0x457>
					}
				}
				if (f ==0) {
     88e:	11 11       	cpse	r17, r1
     890:	06 c0       	rjmp	.+12     	; 0x89e <__stack+0x43f>
					f = keyboardDecode(keyboardReadOnRelease());
     892:	0e 94 81 00 	call	0x102	; 0x102 <keyboardReadOnRelease>
     896:	0e 94 8c 00 	call	0x118	; 0x118 <keyboardDecode>
     89a:	18 2f       	mov	r17, r24
     89c:	0c c0       	rjmp	.+24     	; 0x8b6 <__stack+0x457>
				} else if (c ==0) {
     89e:	01 11       	cpse	r16, r1
     8a0:	0a c0       	rjmp	.+20     	; 0x8b6 <__stack+0x457>
					c = keyboardDecode(keyboardReadOnRelease());
     8a2:	0e 94 81 00 	call	0x102	; 0x102 <keyboardReadOnRelease>
     8a6:	0e 94 8c 00 	call	0x118	; 0x118 <keyboardDecode>
     8aa:	08 2f       	mov	r16, r24
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x457>
     8ae:	00 e0       	ldi	r16, 0x00	; 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	e1 2c       	mov	r14, r1
     8b4:	d1 2c       	mov	r13, r1
		}
		if (state == 3) {
			
			uint8_t attempts =0, found =0;
			uint8_t f= 0, c = 0;
			while (attempts < hide*2 && found < hide) {
     8b6:	8d 2d       	mov	r24, r13
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	2f 2d       	mov	r18, r15
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	82 17       	cp	r24, r18
     8c4:	93 07       	cpc	r25, r19
     8c6:	1c f4       	brge	.+6      	; 0x8ce <__stack+0x46f>
     8c8:	ef 14       	cp	r14, r15
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <__stack+0x46f>
     8cc:	0c cf       	rjmp	.-488    	; 0x6e6 <__stack+0x287>
					f = keyboardDecode(keyboardReadOnRelease());
				} else if (c ==0) {
					c = keyboardDecode(keyboardReadOnRelease());
				}
			}
			PORTB = found;
     8ce:	e8 ba       	out	0x18, r14	; 24
			if (found == hide) {
     8d0:	fe 10       	cpse	r15, r14
     8d2:	45 c0       	rjmp	.+138    	; 0x95e <__stack+0x4ff>
				sprintf(firstLine,  "Tienes excelente");
     8d4:	81 e1       	ldi	r24, 0x11	; 17
     8d6:	e1 ec       	ldi	r30, 0xC1	; 193
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	de 01       	movw	r26, r28
     8dc:	11 96       	adiw	r26, 0x01	; 1
     8de:	01 90       	ld	r0, Z+
     8e0:	0d 92       	st	X+, r0
     8e2:	8a 95       	dec	r24
     8e4:	e1 f7       	brne	.-8      	; 0x8de <__stack+0x47f>
				sprintf(secondLine, "memoria !!!");
     8e6:	8c e0       	ldi	r24, 0x0C	; 12
     8e8:	e4 e8       	ldi	r30, 0x84	; 132
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	de 01       	movw	r26, r28
     8ee:	52 96       	adiw	r26, 0x12	; 18
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <__stack+0x491>
				printLines(firstLine, secondLine);
     8f8:	be 01       	movw	r22, r28
     8fa:	6e 5e       	subi	r22, 0xEE	; 238
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     906:	9f eb       	ldi	r25, 0xBF	; 191
     908:	27 e2       	ldi	r18, 0x27	; 39
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	91 50       	subi	r25, 0x01	; 1
     90e:	20 40       	sbci	r18, 0x00	; 0
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0x4ad>
     914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x4b7>
     916:	00 00       	nop
				_delay_ms(3000);
				
				sprintf(firstLine,  "Ganaste!!!");
     918:	8b e0       	ldi	r24, 0x0B	; 11
     91a:	e0 e9       	ldi	r30, 0x90	; 144
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	de 01       	movw	r26, r28
     920:	11 96       	adiw	r26, 0x01	; 1
     922:	01 90       	ld	r0, Z+
     924:	0d 92       	st	X+, r0
     926:	8a 95       	dec	r24
     928:	e1 f7       	brne	.-8      	; 0x922 <__stack+0x4c3>
				sprintf(secondLine, "Felicidades!");
     92a:	8d e0       	ldi	r24, 0x0D	; 13
     92c:	eb e9       	ldi	r30, 0x9B	; 155
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	de 01       	movw	r26, r28
     932:	52 96       	adiw	r26, 0x12	; 18
     934:	01 90       	ld	r0, Z+
     936:	0d 92       	st	X+, r0
     938:	8a 95       	dec	r24
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0x4d5>
				printLines(firstLine, secondLine);
     93c:	be 01       	movw	r22, r28
     93e:	6e 5e       	subi	r22, 0xEE	; 238
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	ce 01       	movw	r24, r28
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     94a:	9f eb       	ldi	r25, 0xBF	; 191
     94c:	27 e2       	ldi	r18, 0x27	; 39
     94e:	89 e0       	ldi	r24, 0x09	; 9
     950:	91 50       	subi	r25, 0x01	; 1
     952:	20 40       	sbci	r18, 0x00	; 0
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	e1 f7       	brne	.-8      	; 0x950 <__stack+0x4f1>
     958:	00 c0       	rjmp	.+0      	; 0x95a <__stack+0x4fb>
     95a:	00 00       	nop
     95c:	44 c0       	rjmp	.+136    	; 0x9e6 <__stack+0x587>
				_delay_ms(3000);
			} else {
				sprintf(firstLine,  "Tu memoria no es");
     95e:	81 e1       	ldi	r24, 0x11	; 17
     960:	e2 ed       	ldi	r30, 0xD2	; 210
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	de 01       	movw	r26, r28
     966:	11 96       	adiw	r26, 0x01	; 1
     968:	01 90       	ld	r0, Z+
     96a:	0d 92       	st	X+, r0
     96c:	8a 95       	dec	r24
     96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x509>
				sprintf(secondLine, "tan buena =(");
     970:	8d e0       	ldi	r24, 0x0D	; 13
     972:	e8 ea       	ldi	r30, 0xA8	; 168
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	de 01       	movw	r26, r28
     978:	52 96       	adiw	r26, 0x12	; 18
     97a:	01 90       	ld	r0, Z+
     97c:	0d 92       	st	X+, r0
     97e:	8a 95       	dec	r24
     980:	e1 f7       	brne	.-8      	; 0x97a <__stack+0x51b>
				printLines(firstLine, secondLine);
     982:	be 01       	movw	r22, r28
     984:	6e 5e       	subi	r22, 0xEE	; 238
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     990:	9f eb       	ldi	r25, 0xBF	; 191
     992:	27 e2       	ldi	r18, 0x27	; 39
     994:	89 e0       	ldi	r24, 0x09	; 9
     996:	91 50       	subi	r25, 0x01	; 1
     998:	20 40       	sbci	r18, 0x00	; 0
     99a:	80 40       	sbci	r24, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <__stack+0x537>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <__stack+0x541>
     9a0:	00 00       	nop
				_delay_ms(3000);
				
				sprintf(firstLine,  "Perdiste!!!");
     9a2:	8c e0       	ldi	r24, 0x0C	; 12
     9a4:	e5 eb       	ldi	r30, 0xB5	; 181
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	de 01       	movw	r26, r28
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	01 90       	ld	r0, Z+
     9ae:	0d 92       	st	X+, r0
     9b0:	8a 95       	dec	r24
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <__stack+0x54d>
				sprintf(secondLine, "Intenta de nuevo");
     9b4:	81 e1       	ldi	r24, 0x11	; 17
     9b6:	e3 ee       	ldi	r30, 0xE3	; 227
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	de 01       	movw	r26, r28
     9bc:	52 96       	adiw	r26, 0x12	; 18
     9be:	01 90       	ld	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	8a 95       	dec	r24
     9c4:	e1 f7       	brne	.-8      	; 0x9be <__stack+0x55f>
				printLines(firstLine, secondLine);
     9c6:	be 01       	movw	r22, r28
     9c8:	6e 5e       	subi	r22, 0xEE	; 238
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	ce 01       	movw	r24, r28
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	0e 94 77 01 	call	0x2ee	; 0x2ee <printLines>
     9d4:	9f eb       	ldi	r25, 0xBF	; 191
     9d6:	27 e2       	ldi	r18, 0x27	; 39
     9d8:	89 e0       	ldi	r24, 0x09	; 9
     9da:	91 50       	subi	r25, 0x01	; 1
     9dc:	20 40       	sbci	r18, 0x00	; 0
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <__stack+0x57b>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <__stack+0x585>
     9e4:	00 00       	nop
				_delay_ms(3000);
			}
			state =0;
     9e6:	e1 2c       	mov	r14, r1
			continue;
     9e8:	02 cd       	rjmp	.-1532   	; 0x3ee <main+0x3a>

000009ea <__divmodhi4>:
     9ea:	97 fb       	bst	r25, 7
     9ec:	07 2e       	mov	r0, r23
     9ee:	16 f4       	brtc	.+4      	; 0x9f4 <__divmodhi4+0xa>
     9f0:	00 94       	com	r0
     9f2:	07 d0       	rcall	.+14     	; 0xa02 <__divmodhi4_neg1>
     9f4:	77 fd       	sbrc	r23, 7
     9f6:	09 d0       	rcall	.+18     	; 0xa0a <__divmodhi4_neg2>
     9f8:	0e 94 09 05 	call	0xa12	; 0xa12 <__udivmodhi4>
     9fc:	07 fc       	sbrc	r0, 7
     9fe:	05 d0       	rcall	.+10     	; 0xa0a <__divmodhi4_neg2>
     a00:	3e f4       	brtc	.+14     	; 0xa10 <__divmodhi4_exit>

00000a02 <__divmodhi4_neg1>:
     a02:	90 95       	com	r25
     a04:	81 95       	neg	r24
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	08 95       	ret

00000a0a <__divmodhi4_neg2>:
     a0a:	70 95       	com	r23
     a0c:	61 95       	neg	r22
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a10 <__divmodhi4_exit>:
     a10:	08 95       	ret

00000a12 <__udivmodhi4>:
     a12:	aa 1b       	sub	r26, r26
     a14:	bb 1b       	sub	r27, r27
     a16:	51 e1       	ldi	r21, 0x11	; 17
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <__udivmodhi4_ep>

00000a1a <__udivmodhi4_loop>:
     a1a:	aa 1f       	adc	r26, r26
     a1c:	bb 1f       	adc	r27, r27
     a1e:	a6 17       	cp	r26, r22
     a20:	b7 07       	cpc	r27, r23
     a22:	10 f0       	brcs	.+4      	; 0xa28 <__udivmodhi4_ep>
     a24:	a6 1b       	sub	r26, r22
     a26:	b7 0b       	sbc	r27, r23

00000a28 <__udivmodhi4_ep>:
     a28:	88 1f       	adc	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	5a 95       	dec	r21
     a2e:	a9 f7       	brne	.-22     	; 0xa1a <__udivmodhi4_loop>
     a30:	80 95       	com	r24
     a32:	90 95       	com	r25
     a34:	bc 01       	movw	r22, r24
     a36:	cd 01       	movw	r24, r26
     a38:	08 95       	ret

00000a3a <do_rand>:
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
     a50:	68 81       	ld	r22, Y
     a52:	79 81       	ldd	r23, Y+1	; 0x01
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	9b 81       	ldd	r25, Y+3	; 0x03
     a58:	61 15       	cp	r22, r1
     a5a:	71 05       	cpc	r23, r1
     a5c:	81 05       	cpc	r24, r1
     a5e:	91 05       	cpc	r25, r1
     a60:	21 f4       	brne	.+8      	; 0xa6a <do_rand+0x30>
     a62:	64 e2       	ldi	r22, 0x24	; 36
     a64:	79 ed       	ldi	r23, 0xD9	; 217
     a66:	8b e5       	ldi	r24, 0x5B	; 91
     a68:	97 e0       	ldi	r25, 0x07	; 7
     a6a:	2d e1       	ldi	r18, 0x1D	; 29
     a6c:	33 ef       	ldi	r19, 0xF3	; 243
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divmodsi4>
     a76:	49 01       	movw	r8, r18
     a78:	5a 01       	movw	r10, r20
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	a7 ea       	ldi	r26, 0xA7	; 167
     a80:	b1 e4       	ldi	r27, 0x41	; 65
     a82:	0e 94 4b 08 	call	0x1096	; 0x1096 <__muluhisi3>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	ac ee       	ldi	r26, 0xEC	; 236
     a8c:	b4 ef       	ldi	r27, 0xF4	; 244
     a8e:	a5 01       	movw	r20, r10
     a90:	94 01       	movw	r18, r8
     a92:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulohisi3>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	8c 0d       	add	r24, r12
     a9c:	9d 1d       	adc	r25, r13
     a9e:	ae 1d       	adc	r26, r14
     aa0:	bf 1d       	adc	r27, r15
     aa2:	b7 ff       	sbrs	r27, 7
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <do_rand+0x72>
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	a1 09       	sbc	r26, r1
     aaa:	b0 48       	sbci	r27, 0x80	; 128
     aac:	88 83       	st	Y, r24
     aae:	99 83       	std	Y+1, r25	; 0x01
     ab0:	aa 83       	std	Y+2, r26	; 0x02
     ab2:	bb 83       	std	Y+3, r27	; 0x03
     ab4:	9f 77       	andi	r25, 0x7F	; 127
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	08 95       	ret

00000acc <rand_r>:
     acc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <do_rand>
     ad0:	08 95       	ret

00000ad2 <rand>:
     ad2:	80 e6       	ldi	r24, 0x60	; 96
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <do_rand>
     ada:	08 95       	ret

00000adc <srand>:
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     ae4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     ae8:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     aec:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     af0:	08 95       	ret

00000af2 <sprintf>:
     af2:	ae e0       	ldi	r26, 0x0E	; 14
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	ef e7       	ldi	r30, 0x7F	; 127
     af8:	f5 e0       	ldi	r31, 0x05	; 5
     afa:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__prologue_saves__+0x1c>
     afe:	0d 89       	ldd	r16, Y+21	; 0x15
     b00:	1e 89       	ldd	r17, Y+22	; 0x16
     b02:	86 e0       	ldi	r24, 0x06	; 6
     b04:	8c 83       	std	Y+4, r24	; 0x04
     b06:	1a 83       	std	Y+2, r17	; 0x02
     b08:	09 83       	std	Y+1, r16	; 0x01
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	9f e7       	ldi	r25, 0x7F	; 127
     b0e:	9e 83       	std	Y+6, r25	; 0x06
     b10:	8d 83       	std	Y+5, r24	; 0x05
     b12:	ae 01       	movw	r20, r28
     b14:	47 5e       	subi	r20, 0xE7	; 231
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	6f 89       	ldd	r22, Y+23	; 0x17
     b1a:	78 8d       	ldd	r23, Y+24	; 0x18
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	0e 94 9b 05 	call	0xb36	; 0xb36 <vfprintf>
     b24:	ef 81       	ldd	r30, Y+7	; 0x07
     b26:	f8 85       	ldd	r31, Y+8	; 0x08
     b28:	e0 0f       	add	r30, r16
     b2a:	f1 1f       	adc	r31, r17
     b2c:	10 82       	st	Z, r1
     b2e:	2e 96       	adiw	r28, 0x0e	; 14
     b30:	e4 e0       	ldi	r30, 0x04	; 4
     b32:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__epilogue_restores__+0x1c>

00000b36 <vfprintf>:
     b36:	ab e0       	ldi	r26, 0x0B	; 11
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	e1 ea       	ldi	r30, 0xA1	; 161
     b3c:	f5 e0       	ldi	r31, 0x05	; 5
     b3e:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__prologue_saves__>
     b42:	6c 01       	movw	r12, r24
     b44:	7b 01       	movw	r14, r22
     b46:	8a 01       	movw	r16, r20
     b48:	fc 01       	movw	r30, r24
     b4a:	17 82       	std	Z+7, r1	; 0x07
     b4c:	16 82       	std	Z+6, r1	; 0x06
     b4e:	83 81       	ldd	r24, Z+3	; 0x03
     b50:	81 ff       	sbrs	r24, 1
     b52:	cc c1       	rjmp	.+920    	; 0xeec <vfprintf+0x3b6>
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	3c 01       	movw	r6, r24
     b5a:	f6 01       	movw	r30, r12
     b5c:	93 81       	ldd	r25, Z+3	; 0x03
     b5e:	f7 01       	movw	r30, r14
     b60:	93 fd       	sbrc	r25, 3
     b62:	85 91       	lpm	r24, Z+
     b64:	93 ff       	sbrs	r25, 3
     b66:	81 91       	ld	r24, Z+
     b68:	7f 01       	movw	r14, r30
     b6a:	88 23       	and	r24, r24
     b6c:	09 f4       	brne	.+2      	; 0xb70 <vfprintf+0x3a>
     b6e:	ba c1       	rjmp	.+884    	; 0xee4 <vfprintf+0x3ae>
     b70:	85 32       	cpi	r24, 0x25	; 37
     b72:	39 f4       	brne	.+14     	; 0xb82 <vfprintf+0x4c>
     b74:	93 fd       	sbrc	r25, 3
     b76:	85 91       	lpm	r24, Z+
     b78:	93 ff       	sbrs	r25, 3
     b7a:	81 91       	ld	r24, Z+
     b7c:	7f 01       	movw	r14, r30
     b7e:	85 32       	cpi	r24, 0x25	; 37
     b80:	29 f4       	brne	.+10     	; 0xb8c <vfprintf+0x56>
     b82:	b6 01       	movw	r22, r12
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     b8a:	e7 cf       	rjmp	.-50     	; 0xb5a <vfprintf+0x24>
     b8c:	91 2c       	mov	r9, r1
     b8e:	21 2c       	mov	r2, r1
     b90:	31 2c       	mov	r3, r1
     b92:	ff e1       	ldi	r31, 0x1F	; 31
     b94:	f3 15       	cp	r31, r3
     b96:	d8 f0       	brcs	.+54     	; 0xbce <vfprintf+0x98>
     b98:	8b 32       	cpi	r24, 0x2B	; 43
     b9a:	79 f0       	breq	.+30     	; 0xbba <vfprintf+0x84>
     b9c:	38 f4       	brcc	.+14     	; 0xbac <vfprintf+0x76>
     b9e:	80 32       	cpi	r24, 0x20	; 32
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <vfprintf+0x8a>
     ba2:	83 32       	cpi	r24, 0x23	; 35
     ba4:	a1 f4       	brne	.+40     	; 0xbce <vfprintf+0x98>
     ba6:	23 2d       	mov	r18, r3
     ba8:	20 61       	ori	r18, 0x10	; 16
     baa:	1d c0       	rjmp	.+58     	; 0xbe6 <vfprintf+0xb0>
     bac:	8d 32       	cpi	r24, 0x2D	; 45
     bae:	61 f0       	breq	.+24     	; 0xbc8 <vfprintf+0x92>
     bb0:	80 33       	cpi	r24, 0x30	; 48
     bb2:	69 f4       	brne	.+26     	; 0xbce <vfprintf+0x98>
     bb4:	23 2d       	mov	r18, r3
     bb6:	21 60       	ori	r18, 0x01	; 1
     bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <vfprintf+0xb0>
     bba:	83 2d       	mov	r24, r3
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	38 2e       	mov	r3, r24
     bc0:	e3 2d       	mov	r30, r3
     bc2:	e4 60       	ori	r30, 0x04	; 4
     bc4:	3e 2e       	mov	r3, r30
     bc6:	2a c0       	rjmp	.+84     	; 0xc1c <vfprintf+0xe6>
     bc8:	f3 2d       	mov	r31, r3
     bca:	f8 60       	ori	r31, 0x08	; 8
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <vfprintf+0xd2>
     bce:	37 fc       	sbrc	r3, 7
     bd0:	2d c0       	rjmp	.+90     	; 0xc2c <vfprintf+0xf6>
     bd2:	20 ed       	ldi	r18, 0xD0	; 208
     bd4:	28 0f       	add	r18, r24
     bd6:	2a 30       	cpi	r18, 0x0A	; 10
     bd8:	40 f0       	brcs	.+16     	; 0xbea <vfprintf+0xb4>
     bda:	8e 32       	cpi	r24, 0x2E	; 46
     bdc:	b9 f4       	brne	.+46     	; 0xc0c <vfprintf+0xd6>
     bde:	36 fc       	sbrc	r3, 6
     be0:	81 c1       	rjmp	.+770    	; 0xee4 <vfprintf+0x3ae>
     be2:	23 2d       	mov	r18, r3
     be4:	20 64       	ori	r18, 0x40	; 64
     be6:	32 2e       	mov	r3, r18
     be8:	19 c0       	rjmp	.+50     	; 0xc1c <vfprintf+0xe6>
     bea:	36 fe       	sbrs	r3, 6
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <vfprintf+0xc4>
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	98 9e       	mul	r9, r24
     bf2:	20 0d       	add	r18, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	92 2e       	mov	r9, r18
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <vfprintf+0xe6>
     bfa:	ea e0       	ldi	r30, 0x0A	; 10
     bfc:	2e 9e       	mul	r2, r30
     bfe:	20 0d       	add	r18, r0
     c00:	11 24       	eor	r1, r1
     c02:	22 2e       	mov	r2, r18
     c04:	f3 2d       	mov	r31, r3
     c06:	f0 62       	ori	r31, 0x20	; 32
     c08:	3f 2e       	mov	r3, r31
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <vfprintf+0xe6>
     c0c:	8c 36       	cpi	r24, 0x6C	; 108
     c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0xe2>
     c10:	83 2d       	mov	r24, r3
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	38 2e       	mov	r3, r24
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <vfprintf+0xe6>
     c18:	88 36       	cpi	r24, 0x68	; 104
     c1a:	41 f4       	brne	.+16     	; 0xc2c <vfprintf+0xf6>
     c1c:	f7 01       	movw	r30, r14
     c1e:	93 fd       	sbrc	r25, 3
     c20:	85 91       	lpm	r24, Z+
     c22:	93 ff       	sbrs	r25, 3
     c24:	81 91       	ld	r24, Z+
     c26:	7f 01       	movw	r14, r30
     c28:	81 11       	cpse	r24, r1
     c2a:	b3 cf       	rjmp	.-154    	; 0xb92 <vfprintf+0x5c>
     c2c:	98 2f       	mov	r25, r24
     c2e:	9f 7d       	andi	r25, 0xDF	; 223
     c30:	95 54       	subi	r25, 0x45	; 69
     c32:	93 30       	cpi	r25, 0x03	; 3
     c34:	28 f4       	brcc	.+10     	; 0xc40 <vfprintf+0x10a>
     c36:	0c 5f       	subi	r16, 0xFC	; 252
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	9f e3       	ldi	r25, 0x3F	; 63
     c3c:	99 83       	std	Y+1, r25	; 0x01
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <vfprintf+0x124>
     c40:	83 36       	cpi	r24, 0x63	; 99
     c42:	31 f0       	breq	.+12     	; 0xc50 <vfprintf+0x11a>
     c44:	83 37       	cpi	r24, 0x73	; 115
     c46:	71 f0       	breq	.+28     	; 0xc64 <vfprintf+0x12e>
     c48:	83 35       	cpi	r24, 0x53	; 83
     c4a:	09 f0       	breq	.+2      	; 0xc4e <vfprintf+0x118>
     c4c:	59 c0       	rjmp	.+178    	; 0xd00 <vfprintf+0x1ca>
     c4e:	21 c0       	rjmp	.+66     	; 0xc92 <vfprintf+0x15c>
     c50:	f8 01       	movw	r30, r16
     c52:	80 81       	ld	r24, Z
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	0e 5f       	subi	r16, 0xFE	; 254
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	88 24       	eor	r8, r8
     c5c:	83 94       	inc	r8
     c5e:	91 2c       	mov	r9, r1
     c60:	53 01       	movw	r10, r6
     c62:	13 c0       	rjmp	.+38     	; 0xc8a <vfprintf+0x154>
     c64:	28 01       	movw	r4, r16
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	4f 0e       	add	r4, r31
     c6a:	51 1c       	adc	r5, r1
     c6c:	f8 01       	movw	r30, r16
     c6e:	a0 80       	ld	r10, Z
     c70:	b1 80       	ldd	r11, Z+1	; 0x01
     c72:	36 fe       	sbrs	r3, 6
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <vfprintf+0x146>
     c76:	69 2d       	mov	r22, r9
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x14a>
     c7c:	6f ef       	ldi	r22, 0xFF	; 255
     c7e:	7f ef       	ldi	r23, 0xFF	; 255
     c80:	c5 01       	movw	r24, r10
     c82:	0e 94 87 07 	call	0xf0e	; 0xf0e <strnlen>
     c86:	4c 01       	movw	r8, r24
     c88:	82 01       	movw	r16, r4
     c8a:	f3 2d       	mov	r31, r3
     c8c:	ff 77       	andi	r31, 0x7F	; 127
     c8e:	3f 2e       	mov	r3, r31
     c90:	16 c0       	rjmp	.+44     	; 0xcbe <vfprintf+0x188>
     c92:	28 01       	movw	r4, r16
     c94:	22 e0       	ldi	r18, 0x02	; 2
     c96:	42 0e       	add	r4, r18
     c98:	51 1c       	adc	r5, r1
     c9a:	f8 01       	movw	r30, r16
     c9c:	a0 80       	ld	r10, Z
     c9e:	b1 80       	ldd	r11, Z+1	; 0x01
     ca0:	36 fe       	sbrs	r3, 6
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <vfprintf+0x174>
     ca4:	69 2d       	mov	r22, r9
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x178>
     caa:	6f ef       	ldi	r22, 0xFF	; 255
     cac:	7f ef       	ldi	r23, 0xFF	; 255
     cae:	c5 01       	movw	r24, r10
     cb0:	0e 94 7c 07 	call	0xef8	; 0xef8 <strnlen_P>
     cb4:	4c 01       	movw	r8, r24
     cb6:	f3 2d       	mov	r31, r3
     cb8:	f0 68       	ori	r31, 0x80	; 128
     cba:	3f 2e       	mov	r3, r31
     cbc:	82 01       	movw	r16, r4
     cbe:	33 fc       	sbrc	r3, 3
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <vfprintf+0x1c2>
     cc2:	82 2d       	mov	r24, r2
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	88 16       	cp	r8, r24
     cc8:	99 06       	cpc	r9, r25
     cca:	b0 f4       	brcc	.+44     	; 0xcf8 <vfprintf+0x1c2>
     ccc:	b6 01       	movw	r22, r12
     cce:	80 e2       	ldi	r24, 0x20	; 32
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     cd6:	2a 94       	dec	r2
     cd8:	f4 cf       	rjmp	.-24     	; 0xcc2 <vfprintf+0x18c>
     cda:	f5 01       	movw	r30, r10
     cdc:	37 fc       	sbrc	r3, 7
     cde:	85 91       	lpm	r24, Z+
     ce0:	37 fe       	sbrs	r3, 7
     ce2:	81 91       	ld	r24, Z+
     ce4:	5f 01       	movw	r10, r30
     ce6:	b6 01       	movw	r22, r12
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     cee:	21 10       	cpse	r2, r1
     cf0:	2a 94       	dec	r2
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	82 1a       	sub	r8, r18
     cf6:	91 08       	sbc	r9, r1
     cf8:	81 14       	cp	r8, r1
     cfa:	91 04       	cpc	r9, r1
     cfc:	71 f7       	brne	.-36     	; 0xcda <vfprintf+0x1a4>
     cfe:	e8 c0       	rjmp	.+464    	; 0xed0 <vfprintf+0x39a>
     d00:	84 36       	cpi	r24, 0x64	; 100
     d02:	11 f0       	breq	.+4      	; 0xd08 <vfprintf+0x1d2>
     d04:	89 36       	cpi	r24, 0x69	; 105
     d06:	41 f5       	brne	.+80     	; 0xd58 <vfprintf+0x222>
     d08:	f8 01       	movw	r30, r16
     d0a:	37 fe       	sbrs	r3, 7
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <vfprintf+0x1e6>
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	0c 5f       	subi	r16, 0xFC	; 252
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <vfprintf+0x1f6>
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	07 2e       	mov	r0, r23
     d22:	00 0c       	add	r0, r0
     d24:	88 0b       	sbc	r24, r24
     d26:	99 0b       	sbc	r25, r25
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	f3 2d       	mov	r31, r3
     d2e:	ff 76       	andi	r31, 0x6F	; 111
     d30:	3f 2e       	mov	r3, r31
     d32:	97 ff       	sbrs	r25, 7
     d34:	09 c0       	rjmp	.+18     	; 0xd48 <vfprintf+0x212>
     d36:	90 95       	com	r25
     d38:	80 95       	com	r24
     d3a:	70 95       	com	r23
     d3c:	61 95       	neg	r22
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	f0 68       	ori	r31, 0x80	; 128
     d46:	3f 2e       	mov	r3, r31
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	a3 01       	movw	r20, r6
     d4e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__ultoa_invert>
     d52:	88 2e       	mov	r8, r24
     d54:	86 18       	sub	r8, r6
     d56:	45 c0       	rjmp	.+138    	; 0xde2 <vfprintf+0x2ac>
     d58:	85 37       	cpi	r24, 0x75	; 117
     d5a:	31 f4       	brne	.+12     	; 0xd68 <vfprintf+0x232>
     d5c:	23 2d       	mov	r18, r3
     d5e:	2f 7e       	andi	r18, 0xEF	; 239
     d60:	b2 2e       	mov	r11, r18
     d62:	2a e0       	ldi	r18, 0x0A	; 10
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	25 c0       	rjmp	.+74     	; 0xdb2 <vfprintf+0x27c>
     d68:	93 2d       	mov	r25, r3
     d6a:	99 7f       	andi	r25, 0xF9	; 249
     d6c:	b9 2e       	mov	r11, r25
     d6e:	8f 36       	cpi	r24, 0x6F	; 111
     d70:	c1 f0       	breq	.+48     	; 0xda2 <vfprintf+0x26c>
     d72:	18 f4       	brcc	.+6      	; 0xd7a <vfprintf+0x244>
     d74:	88 35       	cpi	r24, 0x58	; 88
     d76:	79 f0       	breq	.+30     	; 0xd96 <vfprintf+0x260>
     d78:	b5 c0       	rjmp	.+362    	; 0xee4 <vfprintf+0x3ae>
     d7a:	80 37       	cpi	r24, 0x70	; 112
     d7c:	19 f0       	breq	.+6      	; 0xd84 <vfprintf+0x24e>
     d7e:	88 37       	cpi	r24, 0x78	; 120
     d80:	21 f0       	breq	.+8      	; 0xd8a <vfprintf+0x254>
     d82:	b0 c0       	rjmp	.+352    	; 0xee4 <vfprintf+0x3ae>
     d84:	e9 2f       	mov	r30, r25
     d86:	e0 61       	ori	r30, 0x10	; 16
     d88:	be 2e       	mov	r11, r30
     d8a:	b4 fe       	sbrs	r11, 4
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <vfprintf+0x272>
     d8e:	fb 2d       	mov	r31, r11
     d90:	f4 60       	ori	r31, 0x04	; 4
     d92:	bf 2e       	mov	r11, r31
     d94:	09 c0       	rjmp	.+18     	; 0xda8 <vfprintf+0x272>
     d96:	34 fe       	sbrs	r3, 4
     d98:	0a c0       	rjmp	.+20     	; 0xdae <vfprintf+0x278>
     d9a:	29 2f       	mov	r18, r25
     d9c:	26 60       	ori	r18, 0x06	; 6
     d9e:	b2 2e       	mov	r11, r18
     da0:	06 c0       	rjmp	.+12     	; 0xdae <vfprintf+0x278>
     da2:	28 e0       	ldi	r18, 0x08	; 8
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <vfprintf+0x27c>
     da8:	20 e1       	ldi	r18, 0x10	; 16
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x27c>
     dae:	20 e1       	ldi	r18, 0x10	; 16
     db0:	32 e0       	ldi	r19, 0x02	; 2
     db2:	f8 01       	movw	r30, r16
     db4:	b7 fe       	sbrs	r11, 7
     db6:	07 c0       	rjmp	.+14     	; 0xdc6 <vfprintf+0x290>
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	0c 5f       	subi	r16, 0xFC	; 252
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <vfprintf+0x29c>
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 5f       	subi	r16, 0xFE	; 254
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	a3 01       	movw	r20, r6
     dd4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__ultoa_invert>
     dd8:	88 2e       	mov	r8, r24
     dda:	86 18       	sub	r8, r6
     ddc:	fb 2d       	mov	r31, r11
     dde:	ff 77       	andi	r31, 0x7F	; 127
     de0:	3f 2e       	mov	r3, r31
     de2:	36 fe       	sbrs	r3, 6
     de4:	0d c0       	rjmp	.+26     	; 0xe00 <vfprintf+0x2ca>
     de6:	23 2d       	mov	r18, r3
     de8:	2e 7f       	andi	r18, 0xFE	; 254
     dea:	a2 2e       	mov	r10, r18
     dec:	89 14       	cp	r8, r9
     dee:	58 f4       	brcc	.+22     	; 0xe06 <vfprintf+0x2d0>
     df0:	34 fe       	sbrs	r3, 4
     df2:	0b c0       	rjmp	.+22     	; 0xe0a <vfprintf+0x2d4>
     df4:	32 fc       	sbrc	r3, 2
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <vfprintf+0x2d4>
     df8:	83 2d       	mov	r24, r3
     dfa:	8e 7e       	andi	r24, 0xEE	; 238
     dfc:	a8 2e       	mov	r10, r24
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <vfprintf+0x2d4>
     e00:	b8 2c       	mov	r11, r8
     e02:	a3 2c       	mov	r10, r3
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <vfprintf+0x2d6>
     e06:	b8 2c       	mov	r11, r8
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <vfprintf+0x2d6>
     e0a:	b9 2c       	mov	r11, r9
     e0c:	a4 fe       	sbrs	r10, 4
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <vfprintf+0x2f8>
     e10:	fe 01       	movw	r30, r28
     e12:	e8 0d       	add	r30, r8
     e14:	f1 1d       	adc	r31, r1
     e16:	80 81       	ld	r24, Z
     e18:	80 33       	cpi	r24, 0x30	; 48
     e1a:	21 f4       	brne	.+8      	; 0xe24 <vfprintf+0x2ee>
     e1c:	9a 2d       	mov	r25, r10
     e1e:	99 7e       	andi	r25, 0xE9	; 233
     e20:	a9 2e       	mov	r10, r25
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x300>
     e24:	a2 fe       	sbrs	r10, 2
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <vfprintf+0x2fe>
     e28:	b3 94       	inc	r11
     e2a:	b3 94       	inc	r11
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <vfprintf+0x300>
     e2e:	8a 2d       	mov	r24, r10
     e30:	86 78       	andi	r24, 0x86	; 134
     e32:	09 f0       	breq	.+2      	; 0xe36 <vfprintf+0x300>
     e34:	b3 94       	inc	r11
     e36:	a3 fc       	sbrc	r10, 3
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <vfprintf+0x326>
     e3a:	a0 fe       	sbrs	r10, 0
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <vfprintf+0x314>
     e3e:	b2 14       	cp	r11, r2
     e40:	88 f4       	brcc	.+34     	; 0xe64 <vfprintf+0x32e>
     e42:	28 0c       	add	r2, r8
     e44:	92 2c       	mov	r9, r2
     e46:	9b 18       	sub	r9, r11
     e48:	0e c0       	rjmp	.+28     	; 0xe66 <vfprintf+0x330>
     e4a:	b2 14       	cp	r11, r2
     e4c:	60 f4       	brcc	.+24     	; 0xe66 <vfprintf+0x330>
     e4e:	b6 01       	movw	r22, r12
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     e58:	b3 94       	inc	r11
     e5a:	f7 cf       	rjmp	.-18     	; 0xe4a <vfprintf+0x314>
     e5c:	b2 14       	cp	r11, r2
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <vfprintf+0x330>
     e60:	2b 18       	sub	r2, r11
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x332>
     e64:	98 2c       	mov	r9, r8
     e66:	21 2c       	mov	r2, r1
     e68:	a4 fe       	sbrs	r10, 4
     e6a:	10 c0       	rjmp	.+32     	; 0xe8c <vfprintf+0x356>
     e6c:	b6 01       	movw	r22, r12
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     e76:	a2 fe       	sbrs	r10, 2
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <vfprintf+0x372>
     e7a:	a1 fc       	sbrc	r10, 1
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <vfprintf+0x34e>
     e7e:	88 e7       	ldi	r24, 0x78	; 120
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x352>
     e84:	88 e5       	ldi	r24, 0x58	; 88
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	b6 01       	movw	r22, r12
     e8a:	0c c0       	rjmp	.+24     	; 0xea4 <vfprintf+0x36e>
     e8c:	8a 2d       	mov	r24, r10
     e8e:	86 78       	andi	r24, 0x86	; 134
     e90:	59 f0       	breq	.+22     	; 0xea8 <vfprintf+0x372>
     e92:	a1 fe       	sbrs	r10, 1
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x364>
     e96:	8b e2       	ldi	r24, 0x2B	; 43
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <vfprintf+0x366>
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	a7 fc       	sbrc	r10, 7
     e9e:	8d e2       	ldi	r24, 0x2D	; 45
     ea0:	b6 01       	movw	r22, r12
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ea8:	89 14       	cp	r8, r9
     eaa:	38 f4       	brcc	.+14     	; 0xeba <vfprintf+0x384>
     eac:	b6 01       	movw	r22, r12
     eae:	80 e3       	ldi	r24, 0x30	; 48
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     eb6:	9a 94       	dec	r9
     eb8:	f7 cf       	rjmp	.-18     	; 0xea8 <vfprintf+0x372>
     eba:	8a 94       	dec	r8
     ebc:	f3 01       	movw	r30, r6
     ebe:	e8 0d       	add	r30, r8
     ec0:	f1 1d       	adc	r31, r1
     ec2:	80 81       	ld	r24, Z
     ec4:	b6 01       	movw	r22, r12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ecc:	81 10       	cpse	r8, r1
     ece:	f5 cf       	rjmp	.-22     	; 0xeba <vfprintf+0x384>
     ed0:	22 20       	and	r2, r2
     ed2:	09 f4       	brne	.+2      	; 0xed6 <vfprintf+0x3a0>
     ed4:	42 ce       	rjmp	.-892    	; 0xb5a <vfprintf+0x24>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 92 07 	call	0xf24	; 0xf24 <fputc>
     ee0:	2a 94       	dec	r2
     ee2:	f6 cf       	rjmp	.-20     	; 0xed0 <vfprintf+0x39a>
     ee4:	f6 01       	movw	r30, r12
     ee6:	86 81       	ldd	r24, Z+6	; 0x06
     ee8:	97 81       	ldd	r25, Z+7	; 0x07
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x3ba>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	2b 96       	adiw	r28, 0x0b	; 11
     ef2:	e2 e1       	ldi	r30, 0x12	; 18
     ef4:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__epilogue_restores__>

00000ef8 <strnlen_P>:
     ef8:	fc 01       	movw	r30, r24
     efa:	05 90       	lpm	r0, Z+
     efc:	61 50       	subi	r22, 0x01	; 1
     efe:	70 40       	sbci	r23, 0x00	; 0
     f00:	01 10       	cpse	r0, r1
     f02:	d8 f7       	brcc	.-10     	; 0xefa <strnlen_P+0x2>
     f04:	80 95       	com	r24
     f06:	90 95       	com	r25
     f08:	8e 0f       	add	r24, r30
     f0a:	9f 1f       	adc	r25, r31
     f0c:	08 95       	ret

00000f0e <strnlen>:
     f0e:	fc 01       	movw	r30, r24
     f10:	61 50       	subi	r22, 0x01	; 1
     f12:	70 40       	sbci	r23, 0x00	; 0
     f14:	01 90       	ld	r0, Z+
     f16:	01 10       	cpse	r0, r1
     f18:	d8 f7       	brcc	.-10     	; 0xf10 <strnlen+0x2>
     f1a:	80 95       	com	r24
     f1c:	90 95       	com	r25
     f1e:	8e 0f       	add	r24, r30
     f20:	9f 1f       	adc	r25, r31
     f22:	08 95       	ret

00000f24 <fputc>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	fb 01       	movw	r30, r22
     f2e:	23 81       	ldd	r18, Z+3	; 0x03
     f30:	21 fd       	sbrc	r18, 1
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <fputc+0x16>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	2c c0       	rjmp	.+88     	; 0xf92 <fputc+0x6e>
     f3a:	22 ff       	sbrs	r18, 2
     f3c:	16 c0       	rjmp	.+44     	; 0xf6a <fputc+0x46>
     f3e:	46 81       	ldd	r20, Z+6	; 0x06
     f40:	57 81       	ldd	r21, Z+7	; 0x07
     f42:	24 81       	ldd	r18, Z+4	; 0x04
     f44:	35 81       	ldd	r19, Z+5	; 0x05
     f46:	42 17       	cp	r20, r18
     f48:	53 07       	cpc	r21, r19
     f4a:	44 f4       	brge	.+16     	; 0xf5c <fputc+0x38>
     f4c:	a0 81       	ld	r26, Z
     f4e:	b1 81       	ldd	r27, Z+1	; 0x01
     f50:	9d 01       	movw	r18, r26
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	31 83       	std	Z+1, r19	; 0x01
     f58:	20 83       	st	Z, r18
     f5a:	8c 93       	st	X, r24
     f5c:	26 81       	ldd	r18, Z+6	; 0x06
     f5e:	37 81       	ldd	r19, Z+7	; 0x07
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	37 83       	std	Z+7, r19	; 0x07
     f66:	26 83       	std	Z+6, r18	; 0x06
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <fputc+0x6e>
     f6a:	8b 01       	movw	r16, r22
     f6c:	ec 01       	movw	r28, r24
     f6e:	fb 01       	movw	r30, r22
     f70:	00 84       	ldd	r0, Z+8	; 0x08
     f72:	f1 85       	ldd	r31, Z+9	; 0x09
     f74:	e0 2d       	mov	r30, r0
     f76:	09 95       	icall
     f78:	89 2b       	or	r24, r25
     f7a:	e1 f6       	brne	.-72     	; 0xf34 <fputc+0x10>
     f7c:	d8 01       	movw	r26, r16
     f7e:	16 96       	adiw	r26, 0x06	; 6
     f80:	8d 91       	ld	r24, X+
     f82:	9c 91       	ld	r25, X
     f84:	17 97       	sbiw	r26, 0x07	; 7
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	17 96       	adiw	r26, 0x07	; 7
     f8a:	9c 93       	st	X, r25
     f8c:	8e 93       	st	-X, r24
     f8e:	16 97       	sbiw	r26, 0x06	; 6
     f90:	ce 01       	movw	r24, r28
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <__ultoa_invert>:
     f9c:	fa 01       	movw	r30, r20
     f9e:	aa 27       	eor	r26, r26
     fa0:	28 30       	cpi	r18, 0x08	; 8
     fa2:	51 f1       	breq	.+84     	; 0xff8 <__ultoa_invert+0x5c>
     fa4:	20 31       	cpi	r18, 0x10	; 16
     fa6:	81 f1       	breq	.+96     	; 0x1008 <__ultoa_invert+0x6c>
     fa8:	e8 94       	clt
     faa:	6f 93       	push	r22
     fac:	6e 7f       	andi	r22, 0xFE	; 254
     fae:	6e 5f       	subi	r22, 0xFE	; 254
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	af 4f       	sbci	r26, 0xFF	; 255
     fb8:	b1 e0       	ldi	r27, 0x01	; 1
     fba:	3e d0       	rcall	.+124    	; 0x1038 <__ultoa_invert+0x9c>
     fbc:	b4 e0       	ldi	r27, 0x04	; 4
     fbe:	3c d0       	rcall	.+120    	; 0x1038 <__ultoa_invert+0x9c>
     fc0:	67 0f       	add	r22, r23
     fc2:	78 1f       	adc	r23, r24
     fc4:	89 1f       	adc	r24, r25
     fc6:	9a 1f       	adc	r25, r26
     fc8:	a1 1d       	adc	r26, r1
     fca:	68 0f       	add	r22, r24
     fcc:	79 1f       	adc	r23, r25
     fce:	8a 1f       	adc	r24, r26
     fd0:	91 1d       	adc	r25, r1
     fd2:	a1 1d       	adc	r26, r1
     fd4:	6a 0f       	add	r22, r26
     fd6:	71 1d       	adc	r23, r1
     fd8:	81 1d       	adc	r24, r1
     fda:	91 1d       	adc	r25, r1
     fdc:	a1 1d       	adc	r26, r1
     fde:	20 d0       	rcall	.+64     	; 0x1020 <__ultoa_invert+0x84>
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__ultoa_invert+0x48>
     fe2:	68 94       	set
     fe4:	3f 91       	pop	r19
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	26 9f       	mul	r18, r22
     fea:	11 24       	eor	r1, r1
     fec:	30 19       	sub	r19, r0
     fee:	30 5d       	subi	r19, 0xD0	; 208
     ff0:	31 93       	st	Z+, r19
     ff2:	de f6       	brtc	.-74     	; 0xfaa <__ultoa_invert+0xe>
     ff4:	cf 01       	movw	r24, r30
     ff6:	08 95       	ret
     ff8:	46 2f       	mov	r20, r22
     ffa:	47 70       	andi	r20, 0x07	; 7
     ffc:	40 5d       	subi	r20, 0xD0	; 208
     ffe:	41 93       	st	Z+, r20
    1000:	b3 e0       	ldi	r27, 0x03	; 3
    1002:	0f d0       	rcall	.+30     	; 0x1022 <__ultoa_invert+0x86>
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__ultoa_invert+0x5c>
    1006:	f6 cf       	rjmp	.-20     	; 0xff4 <__ultoa_invert+0x58>
    1008:	46 2f       	mov	r20, r22
    100a:	4f 70       	andi	r20, 0x0F	; 15
    100c:	40 5d       	subi	r20, 0xD0	; 208
    100e:	4a 33       	cpi	r20, 0x3A	; 58
    1010:	18 f0       	brcs	.+6      	; 0x1018 <__ultoa_invert+0x7c>
    1012:	49 5d       	subi	r20, 0xD9	; 217
    1014:	31 fd       	sbrc	r19, 1
    1016:	40 52       	subi	r20, 0x20	; 32
    1018:	41 93       	st	Z+, r20
    101a:	02 d0       	rcall	.+4      	; 0x1020 <__ultoa_invert+0x84>
    101c:	a9 f7       	brne	.-22     	; 0x1008 <__ultoa_invert+0x6c>
    101e:	ea cf       	rjmp	.-44     	; 0xff4 <__ultoa_invert+0x58>
    1020:	b4 e0       	ldi	r27, 0x04	; 4
    1022:	a6 95       	lsr	r26
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	ba 95       	dec	r27
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__ultoa_invert+0x86>
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 05       	cpc	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	08 95       	ret
    1038:	9b 01       	movw	r18, r22
    103a:	ac 01       	movw	r20, r24
    103c:	0a 2e       	mov	r0, r26
    103e:	06 94       	lsr	r0
    1040:	57 95       	ror	r21
    1042:	47 95       	ror	r20
    1044:	37 95       	ror	r19
    1046:	27 95       	ror	r18
    1048:	ba 95       	dec	r27
    104a:	c9 f7       	brne	.-14     	; 0x103e <__ultoa_invert+0xa2>
    104c:	62 0f       	add	r22, r18
    104e:	73 1f       	adc	r23, r19
    1050:	84 1f       	adc	r24, r20
    1052:	95 1f       	adc	r25, r21
    1054:	a0 1d       	adc	r26, r0
    1056:	08 95       	ret

00001058 <__divmodsi4>:
    1058:	05 2e       	mov	r0, r21
    105a:	97 fb       	bst	r25, 7
    105c:	1e f4       	brtc	.+6      	; 0x1064 <__divmodsi4+0xc>
    105e:	00 94       	com	r0
    1060:	0e 94 43 08 	call	0x1086	; 0x1086 <__negsi2>
    1064:	57 fd       	sbrc	r21, 7
    1066:	07 d0       	rcall	.+14     	; 0x1076 <__divmodsi4_neg2>
    1068:	0e 94 95 08 	call	0x112a	; 0x112a <__udivmodsi4>
    106c:	07 fc       	sbrc	r0, 7
    106e:	03 d0       	rcall	.+6      	; 0x1076 <__divmodsi4_neg2>
    1070:	4e f4       	brtc	.+18     	; 0x1084 <__divmodsi4_exit>
    1072:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__negsi2>

00001076 <__divmodsi4_neg2>:
    1076:	50 95       	com	r21
    1078:	40 95       	com	r20
    107a:	30 95       	com	r19
    107c:	21 95       	neg	r18
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	4f 4f       	sbci	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255

00001084 <__divmodsi4_exit>:
    1084:	08 95       	ret

00001086 <__negsi2>:
    1086:	90 95       	com	r25
    1088:	80 95       	com	r24
    108a:	70 95       	com	r23
    108c:	61 95       	neg	r22
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	08 95       	ret

00001096 <__muluhisi3>:
    1096:	0e 94 b7 08 	call	0x116e	; 0x116e <__umulhisi3>
    109a:	a5 9f       	mul	r26, r21
    109c:	90 0d       	add	r25, r0
    109e:	b4 9f       	mul	r27, r20
    10a0:	90 0d       	add	r25, r0
    10a2:	a4 9f       	mul	r26, r20
    10a4:	80 0d       	add	r24, r0
    10a6:	91 1d       	adc	r25, r1
    10a8:	11 24       	eor	r1, r1
    10aa:	08 95       	ret

000010ac <__mulshisi3>:
    10ac:	b7 ff       	sbrs	r27, 7
    10ae:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__muluhisi3>

000010b2 <__mulohisi3>:
    10b2:	0e 94 4b 08 	call	0x1096	; 0x1096 <__muluhisi3>
    10b6:	82 1b       	sub	r24, r18
    10b8:	93 0b       	sbc	r25, r19
    10ba:	08 95       	ret

000010bc <__prologue_saves__>:
    10bc:	2f 92       	push	r2
    10be:	3f 92       	push	r3
    10c0:	4f 92       	push	r4
    10c2:	5f 92       	push	r5
    10c4:	6f 92       	push	r6
    10c6:	7f 92       	push	r7
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	ca 1b       	sub	r28, r26
    10e6:	db 0b       	sbc	r29, r27
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	09 94       	ijmp

000010f4 <__epilogue_restores__>:
    10f4:	2a 88       	ldd	r2, Y+18	; 0x12
    10f6:	39 88       	ldd	r3, Y+17	; 0x11
    10f8:	48 88       	ldd	r4, Y+16	; 0x10
    10fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    10fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    10fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1100:	8c 84       	ldd	r8, Y+12	; 0x0c
    1102:	9b 84       	ldd	r9, Y+11	; 0x0b
    1104:	aa 84       	ldd	r10, Y+10	; 0x0a
    1106:	b9 84       	ldd	r11, Y+9	; 0x09
    1108:	c8 84       	ldd	r12, Y+8	; 0x08
    110a:	df 80       	ldd	r13, Y+7	; 0x07
    110c:	ee 80       	ldd	r14, Y+6	; 0x06
    110e:	fd 80       	ldd	r15, Y+5	; 0x05
    1110:	0c 81       	ldd	r16, Y+4	; 0x04
    1112:	1b 81       	ldd	r17, Y+3	; 0x03
    1114:	aa 81       	ldd	r26, Y+2	; 0x02
    1116:	b9 81       	ldd	r27, Y+1	; 0x01
    1118:	ce 0f       	add	r28, r30
    111a:	d1 1d       	adc	r29, r1
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	ed 01       	movw	r28, r26
    1128:	08 95       	ret

0000112a <__udivmodsi4>:
    112a:	a1 e2       	ldi	r26, 0x21	; 33
    112c:	1a 2e       	mov	r1, r26
    112e:	aa 1b       	sub	r26, r26
    1130:	bb 1b       	sub	r27, r27
    1132:	fd 01       	movw	r30, r26
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <__udivmodsi4_ep>

00001136 <__udivmodsi4_loop>:
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	ee 1f       	adc	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	a2 17       	cp	r26, r18
    1140:	b3 07       	cpc	r27, r19
    1142:	e4 07       	cpc	r30, r20
    1144:	f5 07       	cpc	r31, r21
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__udivmodsi4_ep>
    1148:	a2 1b       	sub	r26, r18
    114a:	b3 0b       	sbc	r27, r19
    114c:	e4 0b       	sbc	r30, r20
    114e:	f5 0b       	sbc	r31, r21

00001150 <__udivmodsi4_ep>:
    1150:	66 1f       	adc	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	1a 94       	dec	r1
    115a:	69 f7       	brne	.-38     	; 0x1136 <__udivmodsi4_loop>
    115c:	60 95       	com	r22
    115e:	70 95       	com	r23
    1160:	80 95       	com	r24
    1162:	90 95       	com	r25
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	bd 01       	movw	r22, r26
    116a:	cf 01       	movw	r24, r30
    116c:	08 95       	ret

0000116e <__umulhisi3>:
    116e:	a2 9f       	mul	r26, r18
    1170:	b0 01       	movw	r22, r0
    1172:	b3 9f       	mul	r27, r19
    1174:	c0 01       	movw	r24, r0
    1176:	a3 9f       	mul	r26, r19
    1178:	70 0d       	add	r23, r0
    117a:	81 1d       	adc	r24, r1
    117c:	11 24       	eor	r1, r1
    117e:	91 1d       	adc	r25, r1
    1180:	b2 9f       	mul	r27, r18
    1182:	70 0d       	add	r23, r0
    1184:	81 1d       	adc	r24, r1
    1186:	11 24       	eor	r1, r1
    1188:	91 1d       	adc	r25, r1
    118a:	08 95       	ret

0000118c <_exit>:
    118c:	f8 94       	cli

0000118e <__stop_program>:
    118e:	ff cf       	rjmp	.-2      	; 0x118e <__stop_program>
