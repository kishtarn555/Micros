
sine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  000000f4  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800160  00800160  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060c  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000202  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f9  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
//Contador para mostrar donde en la onda estamos. Va de 0 a 
volatile uint8_t idx;

int main(void)
{
	idx =0;
  92:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
	OCR0 = 128;
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	8c bf       	out	0x3c, r24	; 60
	// Activate TIMSK interrupts
	TIMSK = (1<<TOIE0);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57
	// Lets do a clock at  8 preescaler => 488 hz (Close-ish to 440) With non-inverted OC0
	//TIMER0_FAST_PWM y PSCLR0_0 estan en el archivo my_defines.h
	// 1 << COM01 dice que el PWM controle el puerto B3
	TCCR0 = TIMER0_FAST_PWM | PSCLR0_0 | (1<<COM01);
  9e:	89 e6       	ldi	r24, 0x69	; 105
  a0:	83 bf       	out	0x33, r24	; 51
	//Activa interrupciones
	sei(); 
  a2:	78 94       	sei
	// Establece PORTB 3 como salida 
	DDRB |= (1<<3);
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	87 bb       	out	0x17, r24	; 23
	//Led de depuracion de salida
	DDRD |= 1;
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1;
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x24>

000000b8 <__vector_9>:


//Interrupcion del timer 0 por overflow 
//ISR = Interrupt Service Routine
//Timer0_OVF = Timer 0, overflow.
ISR(TIMER0_OVF_vect) {
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	idx++; //Incrementa idx en uno, si idx era 255, pasa a 0 por overflow
  c8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
	OCR0 = sine[idx];//cambia el duty time del PWM a ser el valor de sine[idx]
  d2:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__data_end>
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e0 5a       	subi	r30, 0xA0	; 160
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
  de:	8c bf       	out	0x3c, r24	; 60
	#ifdef K_DEBUG
		if (idx==0) {
			PORTD ^= 1;
		}
	#endif
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
