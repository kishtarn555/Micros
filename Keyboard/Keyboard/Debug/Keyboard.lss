
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000326  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d93  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d1  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047c  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006bf  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002e5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  7a:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	85 b3       	in	r24, 0x15	; 21
  84:	80 64       	ori	r24, 0x40	; 64
  86:	85 bb       	out	0x15, r24	; 21
  88:	00 c0       	rjmp	.+0      	; 0x8a <toggle_e+0x8>
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	85 bb       	out	0x15, r24	; 21
  90:	08 95       	ret

00000092 <lcd_write>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	d8 2f       	mov	r29, r24
  98:	66 23       	and	r22, r22
  9a:	21 f0       	breq	.+8      	; 0xa4 <lcd_write+0x12>
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	03 c0       	rjmp	.+6      	; 0xaa <lcd_write+0x18>
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	84 bb       	out	0x14, r24	; 20
  b6:	c5 b3       	in	r28, 0x15	; 21
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	8d 2f       	mov	r24, r29
  bc:	82 95       	swap	r24
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	8c 2b       	or	r24, r28
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  c8:	df 70       	andi	r29, 0x0F	; 15
  ca:	dc 2b       	or	r29, r28
  cc:	d5 bb       	out	0x15, r29	; 21
  ce:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  d2:	cf 60       	ori	r28, 0x0F	; 15
  d4:	c5 bb       	out	0x15, r28	; 21
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_read>:
  dc:	88 23       	and	r24, r24
  de:	21 f0       	breq	.+8      	; 0xe8 <lcd_read+0xc>
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	03 c0       	rjmp	.+6      	; 0xee <lcd_read+0x12>
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	84 b3       	in	r24, 0x14	; 20
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	84 bb       	out	0x14, r24	; 20
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	85 bb       	out	0x15, r24	; 21
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_read+0x26>
 102:	93 b3       	in	r25, 0x13	; 19
 104:	92 95       	swap	r25
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x34>
 110:	85 b3       	in	r24, 0x15	; 21
 112:	80 64       	ori	r24, 0x40	; 64
 114:	85 bb       	out	0x15, r24	; 21
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_read+0x3c>
 118:	83 b3       	in	r24, 0x13	; 19
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	2f 7b       	andi	r18, 0xBF	; 191
 120:	25 bb       	out	0x15, r18	; 21
 122:	89 2b       	or	r24, r25
 124:	08 95       	ret

00000126 <lcd_waitbusy>:
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 12c:	88 23       	and	r24, r24
 12e:	dc f3       	brlt	.-10     	; 0x126 <lcd_waitbusy>
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_waitbusy+0xe>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 13e:	08 95       	ret

00000140 <lcd_command>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_gotoxy>:
 154:	61 11       	cpse	r22, r1
 156:	04 c0       	rjmp	.+8      	; 0x160 <lcd_gotoxy+0xc>
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 15e:	08 95       	ret
 160:	80 54       	subi	r24, 0x40	; 64
 162:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 166:	08 95       	ret

00000168 <lcd_clrscr>:
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 16e:	08 95       	ret

00000170 <lcd_putc>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
 178:	ca 30       	cpi	r28, 0x0A	; 10
 17a:	49 f4       	brne	.+18     	; 0x18e <lcd_putc+0x1e>
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	10 f4       	brcc	.+4      	; 0x184 <lcd_putc+0x14>
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_putc+0x16>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	80 58       	subi	r24, 0x80	; 128
 188:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lcd_putc+0x26>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_puts>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	fc 01       	movw	r30, r24
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_puts+0xe>
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 1a6:	fe 01       	movw	r30, r28
 1a8:	ef 01       	movw	r28, r30
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	81 11       	cpse	r24, r1
 1b0:	f8 cf       	rjmp	.-16     	; 0x1a2 <lcd_puts+0x8>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1c0:	84 b3       	in	r24, 0x14	; 20
 1c2:	8f 67       	ori	r24, 0x7F	; 127
 1c4:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	9d e7       	ldi	r25, 0x7D	; 125
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1da:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	97 e2       	ldi	r25, 0x27	; 39
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e6:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	c0 e8       	ldi	r28, 0x80	; 128
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1fe:	85 b3       	in	r24, 0x15	; 21
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 204:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 218:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 222:	81 2f       	mov	r24, r17
 224:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>

}/* lcd_init */
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <initMatrixKeyboard>:
#define MAT_KEY_PORT PORTA

#include "lcd.h"

void initMatrixKeyboard() {
	MAT_KEY_DDR = 0b11110000;
 230:	80 ef       	ldi	r24, 0xF0	; 240
 232:	8a bb       	out	0x1a, r24	; 26
	MAT_KEY_PORT = 255;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	8b bb       	out	0x1b, r24	; 27
 238:	08 95       	ret

0000023a <readFirstMatrixKeyboard>:
}

uint8_t readFirstMatrixKeyboard() {	
	uint8_t returnCode=0;
	for (uint8_t i =0; i < 4; i++) {		
 23a:	90 e0       	ldi	r25, 0x00	; 0
	MAT_KEY_DDR = 0b11110000;
	MAT_KEY_PORT = 255;
}

uint8_t readFirstMatrixKeyboard() {	
	uint8_t returnCode=0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i =0; i < 4; i++) {		
 23e:	2e c0       	rjmp	.+92     	; 0x29c <readFirstMatrixKeyboard+0x62>
		MAT_KEY_PORT = 255 ^ (1<<(i+4));
 240:	49 2f       	mov	r20, r25
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	4c 5f       	subi	r20, 0xFC	; 252
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <readFirstMatrixKeyboard+0x18>
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	4a 95       	dec	r20
 254:	e2 f7       	brpl	.-8      	; 0x24e <readFirstMatrixKeyboard+0x14>
 256:	20 95       	com	r18
 258:	2b bb       	out	0x1b, r18	; 27
		asm("nop");		
 25a:	00 00       	nop
		uint8_t res = MAT_KEY_PIN & 15;
 25c:	29 b3       	in	r18, 0x19	; 25
 25e:	32 2f       	mov	r19, r18
 260:	3f 70       	andi	r19, 0x0F	; 15
		if (res != 15) {
 262:	3f 30       	cpi	r19, 0x0F	; 15
 264:	c9 f0       	breq	.+50     	; 0x298 <readFirstMatrixKeyboard+0x5e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	3f e7       	ldi	r19, 0x7F	; 127
 268:	48 e3       	ldi	r20, 0x38	; 56
 26a:	51 e0       	ldi	r21, 0x01	; 1
 26c:	31 50       	subi	r19, 0x01	; 1
 26e:	40 40       	sbci	r20, 0x00	; 0
 270:	50 40       	sbci	r21, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <readFirstMatrixKeyboard+0x32>
 274:	00 c0       	rjmp	.+0      	; 0x276 <readFirstMatrixKeyboard+0x3c>
 276:	00 00       	nop
			_delay_ms(50);
			
			if (!(res &1)) {
 278:	20 fd       	sbrc	r18, 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <readFirstMatrixKeyboard+0x46>
				return returnCode+1;
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	08 95       	ret
			}
			if (!(res &2)) {
 280:	21 fd       	sbrc	r18, 1
 282:	02 c0       	rjmp	.+4      	; 0x288 <readFirstMatrixKeyboard+0x4e>
				return returnCode+2;
 284:	8e 5f       	subi	r24, 0xFE	; 254
 286:	08 95       	ret
			}
			if (!(res &4)) {
 288:	22 fd       	sbrc	r18, 2
 28a:	02 c0       	rjmp	.+4      	; 0x290 <readFirstMatrixKeyboard+0x56>
				return returnCode+3;
 28c:	8d 5f       	subi	r24, 0xFD	; 253
 28e:	08 95       	ret
			}
			if (!(res &8)) {
 290:	23 fd       	sbrc	r18, 3
 292:	02 c0       	rjmp	.+4      	; 0x298 <readFirstMatrixKeyboard+0x5e>
				return returnCode+4;
 294:	8c 5f       	subi	r24, 0xFC	; 252
 296:	08 95       	ret
			}
		}
		returnCode+=4;
 298:	8c 5f       	subi	r24, 0xFC	; 252
	MAT_KEY_PORT = 255;
}

uint8_t readFirstMatrixKeyboard() {	
	uint8_t returnCode=0;
	for (uint8_t i =0; i < 4; i++) {		
 29a:	9f 5f       	subi	r25, 0xFF	; 255
 29c:	94 30       	cpi	r25, 0x04	; 4
 29e:	80 f2       	brcs	.-96     	; 0x240 <readFirstMatrixKeyboard+0x6>
				return returnCode+4;
			}
		}
		returnCode+=4;
	}
	return 0;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
}
 2a2:	08 95       	ret

000002a4 <main>:


int main(void)
{
	initMatrixKeyboard();
 2a4:	0e 94 18 01 	call	0x230	; 0x230 <initMatrixKeyboard>
	lcd_init(LCD_DISP_ON);
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_init>
    /* Replace with your application code */
    uint8_t response=0;
    uint8_t length=0;
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	initMatrixKeyboard();
	lcd_init(LCD_DISP_ON);
    /* Replace with your application code */
    uint8_t response=0;
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <main+0x16>
    uint8_t length=0;
    while (1) {
		while (!response) {
			response = readFirstMatrixKeyboard();
 2b4:	0e 94 1d 01 	call	0x23a	; 0x23a <readFirstMatrixKeyboard>
 2b8:	c8 2f       	mov	r28, r24
	lcd_init(LCD_DISP_ON);
    /* Replace with your application code */
    uint8_t response=0;
    uint8_t length=0;
    while (1) {
		while (!response) {
 2ba:	cc 23       	and	r28, r28
 2bc:	d9 f3       	breq	.-10     	; 0x2b4 <main+0x10>
			response = readFirstMatrixKeyboard();
		}
		if (response == 4) {
 2be:	c4 30       	cpi	r28, 0x04	; 4
 2c0:	71 f4       	brne	.+28     	; 0x2de <main+0x3a>
			lcd_gotoxy(0,0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
			lcd_puts("          ");			
 2ca:	80 e6       	ldi	r24, 0x60	; 96
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
			lcd_gotoxy(0,0);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
			length=0;
 2da:	d0 e0       	ldi	r29, 0x00	; 0
 2dc:	1f c0       	rjmp	.+62     	; 0x31c <main+0x78>
		} else if (response == 12) {
 2de:	cc 30       	cpi	r28, 0x0C	; 12
 2e0:	79 f4       	brne	.+30     	; 0x300 <main+0x5c>
			if (length >= 1) {
 2e2:	dd 23       	and	r29, r29
 2e4:	d9 f0       	breq	.+54     	; 0x31c <main+0x78>
				lcd_gotoxy(--length,0);
 2e6:	d1 50       	subi	r29, 0x01	; 1
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	8d 2f       	mov	r24, r29
 2ec:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
				lcd_putc(' ');
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			
				lcd_gotoxy(length,0);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	8d 2f       	mov	r24, r29
 2fa:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
 2fe:	0e c0       	rjmp	.+28     	; 0x31c <main+0x78>
			}
		
		} else if (length < 10) {
 300:	da 30       	cpi	r29, 0x0A	; 10
 302:	60 f4       	brcc	.+24     	; 0x31c <main+0x78>
			
			lcd_putc(" 147*25803694A987"[response]);
 304:	ec 2f       	mov	r30, r28
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	e5 59       	subi	r30, 0x95	; 149
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	80 81       	ld	r24, Z
 30e:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			length++;
 312:	df 5f       	subi	r29, 0xFF	; 255
 314:	03 c0       	rjmp	.+6      	; 0x31c <main+0x78>
		}
		
		while (response) {
			response = readFirstMatrixKeyboard();
 316:	0e 94 1d 01 	call	0x23a	; 0x23a <readFirstMatrixKeyboard>
 31a:	c8 2f       	mov	r28, r24
			
			lcd_putc(" 147*25803694A987"[response]);
			length++;
		}
		
		while (response) {
 31c:	c1 11       	cpse	r28, r1
 31e:	fb cf       	rjmp	.-10     	; 0x316 <main+0x72>
 320:	cc cf       	rjmp	.-104    	; 0x2ba <main+0x16>

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
