
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  00000815  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_init>:
#define MYUBRR F_CPU/16/BAUD-1
#include <avr/io.h>
#include <util/delay.h>

void USART_init(uint16_t ubrr){ //con este parametro me evito usar las tablitas
	UCSRA = 0b00100000; //modo asincrono a velocidad normal, sobre todo config la velocidad
  6c:	20 e2       	ldi	r18, 0x20	; 32
  6e:	2b b9       	out	0x0b, r18	; 11
	//como vamos a transmitir no ocupasmos int de recepcion
	UCSRB|=(1<<TXEN); //0B00001000 -> LE PUSE UN 1 A TX ENABLE, transmision habilitada
  70:	2a b1       	in	r18, 0x0a	; 10
  72:	28 60       	ori	r18, 0x08	; 8
  74:	2a b9       	out	0x0a, r18	; 10
	UCSRC=	0b100000110; //ahorita sin paridad, 0 es un bit de parada, tamaÃ±o del dato es 8 (11)
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	20 bd       	out	0x20, r18	; 32
	//UBRR = 12 esto no sirve porque UBRR tiene la parte alta y la baja
	UBRRH = (uint8_t)(ubrr>>8);
  7a:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t) ubrr;
  7c:	89 b9       	out	0x09, r24	; 9
  7e:	08 95       	ret

00000080 <main>:
	
}

int main(void)
{
	USART_init(MYUBRR);
  80:	8c e0       	ldi	r24, 0x0C	; 12
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 36 00 	call	0x6c	; 0x6c <USART_init>
    /* Replace with your application code */
    while (1) 
    {
			UDR = 'A'; //Mandamos un A
  88:	81 e4       	ldi	r24, 0x41	; 65
  8a:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f e9       	ldi	r18, 0x9F	; 159
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
  9e:	f4 cf       	rjmp	.-24     	; 0x88 <main+0x8>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
