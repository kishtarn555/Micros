
eepromTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  00000616  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115a  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab9  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099c  00000000  00000000  000023bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ee  00000000  00000000  000034a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
  8a:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyboardInit>:

void keyboardInit(void) {
	#if KB_READWRITEMODE == 1
		DDRKB = 0b00001111;
	#else
		DDRKB = 0b11110000;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	81 bb       	out	0x11, r24	; 17
	#endif
	PORTKB = 255;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret

0000009c <keyboardRead>:

uint8_t keyboardRead() {
	uint8_t response =1;	
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
  9c:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	PORTKB = 255;
}

uint8_t keyboardRead() {
	uint8_t response =1;	
  9e:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <keyboardRead+0x58>
		PORTKB = 255 ^ kb_out(i);
  a2:	47 e0       	ldi	r20, 0x07	; 7
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	49 1b       	sub	r20, r25
  a8:	51 09       	sbc	r21, r1
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <keyboardRead+0x18>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	4a 95       	dec	r20
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <keyboardRead+0x14>
  b8:	20 95       	com	r18
  ba:	22 bb       	out	0x12, r18	; 18
		asm("nop");
  bc:	00 00       	nop
		test = PINKB & kb_readpins;
  be:	20 b3       	in	r18, 0x10	; 16
  c0:	32 2f       	mov	r19, r18
  c2:	3f 70       	andi	r19, 0x0F	; 15
		if (test != kb_readpins) {
  c4:	3f 30       	cpi	r19, 0x0F	; 15
  c6:	a1 f0       	breq	.+40     	; 0xf0 <keyboardRead+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e3 ed       	ldi	r30, 0xD3	; 211
  ca:	f0 e3       	ldi	r31, 0x30	; 48
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <keyboardRead+0x30>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <keyboardRead+0x36>
  d2:	00 00       	nop
			_delay_ms(50);
			if (!(test & kb_read0))
  d4:	23 ff       	sbrs	r18, 3
  d6:	11 c0       	rjmp	.+34     	; 0xfa <keyboardRead+0x5e>
				return response;
			if (!(test & kb_read1))
  d8:	22 fd       	sbrc	r18, 2
  da:	02 c0       	rjmp	.+4      	; 0xe0 <keyboardRead+0x44>
				return response+1;				
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	08 95       	ret
			if (!(test & kb_read2))
  e0:	21 fd       	sbrc	r18, 1
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <keyboardRead+0x4c>
				return response+2;				
  e4:	8e 5f       	subi	r24, 0xFE	; 254
  e6:	08 95       	ret
			if (!(test & kb_read3))
  e8:	20 fd       	sbrc	r18, 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <keyboardRead+0x54>
				return response+3;
  ec:	8d 5f       	subi	r24, 0xFD	; 253
  ee:	08 95       	ret
		}
		response+=4;
  f0:	8c 5f       	subi	r24, 0xFC	; 252

uint8_t keyboardRead() {
	uint8_t response =1;	
	uint8_t test;
	uint8_t i;
	for ( i =0; i < 4; i++) {
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	94 30       	cpi	r25, 0x04	; 4
  f6:	a8 f2       	brcs	.-86     	; 0xa2 <keyboardRead+0x6>
			if (!(test & kb_read3))
				return response+3;
		}
		response+=4;
	}
	return 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0
}
  fa:	08 95       	ret

000000fc <keyboardHoldUntilOff>:

void keyboardHoldUntilOff() {
	while (keyboardRead()) {;}
  fc:	0e 94 4e 00 	call	0x9c	; 0x9c <keyboardRead>
 100:	81 11       	cpse	r24, r1
 102:	fc cf       	rjmp	.-8      	; 0xfc <keyboardHoldUntilOff>
 104:	83 ed       	ldi	r24, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <keyboardHoldUntilOff+0xc>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <keyboardHoldUntilOff+0x12>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <keyboardReadOnRelease>:
	_delay_ms(50);
}

uint8_t keyboardReadOnRelease() {
 112:	cf 93       	push	r28
	uint8_t response =0;
	do {
		response = keyboardRead();
 114:	0e 94 4e 00 	call	0x9c	; 0x9c <keyboardRead>
 118:	c8 2f       	mov	r28, r24
	} while (response==0);
 11a:	88 23       	and	r24, r24
 11c:	d9 f3       	breq	.-10     	; 0x114 <keyboardReadOnRelease+0x2>
	keyboardHoldUntilOff();
 11e:	0e 94 7e 00 	call	0xfc	; 0xfc <keyboardHoldUntilOff>
	return response;
}
 122:	8c 2f       	mov	r24, r28
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <keyboardDecode>:

uint8_t keyboardDecode(const uint8_t keycode) {
	return KB_CODE_STR[keycode-1];
 128:	e8 2f       	mov	r30, r24
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e1 5a       	subi	r30, 0xA1	; 161
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 81       	ld	r24, Z
 132:	08 95       	ret

00000134 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 134:	85 b3       	in	r24, 0x15	; 21
 136:	80 64       	ori	r24, 0x40	; 64
 138:	85 bb       	out	0x15, r24	; 21
 13a:	00 c0       	rjmp	.+0      	; 0x13c <toggle_e+0x8>
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	8f 7b       	andi	r24, 0xBF	; 191
 140:	85 bb       	out	0x15, r24	; 21
 142:	08 95       	ret

00000144 <lcd_write>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	d8 2f       	mov	r29, r24
 14a:	66 23       	and	r22, r22
 14c:	21 f0       	breq	.+8      	; 0x156 <lcd_write+0x12>
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	80 61       	ori	r24, 0x10	; 16
 152:	85 bb       	out	0x15, r24	; 21
 154:	03 c0       	rjmp	.+6      	; 0x15c <lcd_write+0x18>
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8f 7e       	andi	r24, 0xEF	; 239
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	85 bb       	out	0x15, r24	; 21
 162:	84 b3       	in	r24, 0x14	; 20
 164:	8f 60       	ori	r24, 0x0F	; 15
 166:	84 bb       	out	0x14, r24	; 20
 168:	c5 b3       	in	r28, 0x15	; 21
 16a:	c0 7f       	andi	r28, 0xF0	; 240
 16c:	8d 2f       	mov	r24, r29
 16e:	82 95       	swap	r24
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	8c 2b       	or	r24, r28
 174:	85 bb       	out	0x15, r24	; 21
 176:	0e 94 9a 00 	call	0x134	; 0x134 <toggle_e>
 17a:	df 70       	andi	r29, 0x0F	; 15
 17c:	dc 2b       	or	r29, r28
 17e:	d5 bb       	out	0x15, r29	; 21
 180:	0e 94 9a 00 	call	0x134	; 0x134 <toggle_e>
 184:	cf 60       	ori	r28, 0x0F	; 15
 186:	c5 bb       	out	0x15, r28	; 21
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_read>:
 18e:	88 23       	and	r24, r24
 190:	21 f0       	breq	.+8      	; 0x19a <lcd_read+0xc>
 192:	85 b3       	in	r24, 0x15	; 21
 194:	80 61       	ori	r24, 0x10	; 16
 196:	85 bb       	out	0x15, r24	; 21
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <lcd_read+0x12>
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	85 b3       	in	r24, 0x15	; 21
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	84 b3       	in	r24, 0x14	; 20
 1a8:	80 7f       	andi	r24, 0xF0	; 240
 1aa:	84 bb       	out	0x14, r24	; 20
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_read+0x26>
 1b4:	93 b3       	in	r25, 0x13	; 19
 1b6:	92 95       	swap	r25
 1b8:	90 7f       	andi	r25, 0xF0	; 240
 1ba:	85 b3       	in	r24, 0x15	; 21
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_read+0x34>
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_read+0x3c>
 1ca:	83 b3       	in	r24, 0x13	; 19
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	25 b3       	in	r18, 0x15	; 21
 1d0:	2f 7b       	andi	r18, 0xBF	; 191
 1d2:	25 bb       	out	0x15, r18	; 21
 1d4:	89 2b       	or	r24, r25
 1d6:	08 95       	ret

000001d8 <lcd_waitbusy>:
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_read>
 1de:	88 23       	and	r24, r24
 1e0:	dc f3       	brlt	.-10     	; 0x1d8 <lcd_waitbusy>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_waitbusy+0xc>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_read>
 1ea:	08 95       	ret

000001ec <lcd_command>:
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
 1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_waitbusy>
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	8c 2f       	mov	r24, r28
 1f8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write>
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_gotoxy>:
 200:	61 11       	cpse	r22, r1
 202:	04 c0       	rjmp	.+8      	; 0x20c <lcd_gotoxy+0xc>
 204:	80 58       	subi	r24, 0x80	; 128
 206:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 20a:	08 95       	ret
 20c:	80 54       	subi	r24, 0x40	; 64
 20e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 212:	08 95       	ret

00000214 <lcd_clrscr>:
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 21a:	08 95       	ret

0000021c <lcd_putc>:
 21c:	cf 93       	push	r28
 21e:	c8 2f       	mov	r28, r24
 220:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_waitbusy>
 224:	ca 30       	cpi	r28, 0x0A	; 10
 226:	49 f4       	brne	.+18     	; 0x23a <lcd_putc+0x1e>
 228:	80 34       	cpi	r24, 0x40	; 64
 22a:	10 f4       	brcc	.+4      	; 0x230 <lcd_putc+0x14>
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	01 c0       	rjmp	.+2      	; 0x232 <lcd_putc+0x16>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	80 58       	subi	r24, 0x80	; 128
 234:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
 238:	04 c0       	rjmp	.+8      	; 0x242 <lcd_putc+0x26>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	8c 2f       	mov	r24, r28
 23e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write>
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 24e:	84 b3       	in	r24, 0x14	; 20
 250:	8f 67       	ori	r24, 0x7F	; 127
 252:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 254:	80 ea       	ldi	r24, 0xA0	; 160
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 25c:	85 b3       	in	r24, 0x15	; 21
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 262:	85 b3       	in	r24, 0x15	; 21
 264:	81 60       	ori	r24, 0x01	; 1
 266:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 268:	0e 94 9a 00 	call	0x134	; 0x134 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 26c:	80 ee       	ldi	r24, 0xE0	; 224
 26e:	94 e0       	ldi	r25, 0x04	; 4
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 274:	0e 94 9a 00 	call	0x134	; 0x134 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 278:	c0 e1       	ldi	r28, 0x10	; 16
 27a:	d0 e0       	ldi	r29, 0x00	; 0
 27c:	ce 01       	movw	r24, r28
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 282:	0e 94 9a 00 	call	0x134	; 0x134 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 286:	ce 01       	movw	r24, r28
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 292:	0e 94 9a 00 	call	0x134	; 0x134 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 296:	21 97       	sbiw	r28, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2a6:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2b0:	81 2f       	mov	r24, r17
 2b2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_command>

}/* lcd_init */
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	08 95       	ret

000002be <display>:
#include <stdint.h>

uint16_t val;

void display() {
	lcd_gotoxy(0,0);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 00 01 	call	0x200	; 0x200 <lcd_gotoxy>
	lcd_putc(val%10+'0');
 2c6:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <__data_end>
 2ca:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <__data_end+0x1>
 2ce:	9a 01       	movw	r18, r20
 2d0:	ad ec       	ldi	r26, 0xCD	; 205
 2d2:	bc ec       	ldi	r27, 0xCC	; 204
 2d4:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	9a 01       	movw	r18, r20
 2fc:	28 1b       	sub	r18, r24
 2fe:	39 0b       	sbc	r19, r25
 300:	c9 01       	movw	r24, r18
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_putc>
	lcd_putc(val/10%10+'0');
 308:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 30c:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 310:	ad ec       	ldi	r26, 0xCD	; 205
 312:	bc ec       	ldi	r27, 0xCC	; 204
 314:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 318:	ac 01       	movw	r20, r24
 31a:	56 95       	lsr	r21
 31c:	47 95       	ror	r20
 31e:	56 95       	lsr	r21
 320:	47 95       	ror	r20
 322:	56 95       	lsr	r21
 324:	47 95       	ror	r20
 326:	9a 01       	movw	r18, r20
 328:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	9c 01       	movw	r18, r24
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	82 0f       	add	r24, r18
 34c:	93 1f       	adc	r25, r19
 34e:	9a 01       	movw	r18, r20
 350:	28 1b       	sub	r18, r24
 352:	39 0b       	sbc	r19, r25
 354:	c9 01       	movw	r24, r18
 356:	80 5d       	subi	r24, 0xD0	; 208
 358:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_putc>
	lcd_putc(val/100%10+'0');
 35c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 360:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 364:	36 95       	lsr	r19
 366:	27 95       	ror	r18
 368:	36 95       	lsr	r19
 36a:	27 95       	ror	r18
 36c:	ab e7       	ldi	r26, 0x7B	; 123
 36e:	b4 e1       	ldi	r27, 0x14	; 20
 370:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 374:	ac 01       	movw	r20, r24
 376:	56 95       	lsr	r21
 378:	47 95       	ror	r20
 37a:	9a 01       	movw	r18, r20
 37c:	ad ec       	ldi	r26, 0xCD	; 205
 37e:	bc ec       	ldi	r27, 0xCC	; 204
 380:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
 388:	96 95       	lsr	r25
 38a:	87 95       	ror	r24
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	9c 01       	movw	r18, r24
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	9a 01       	movw	r18, r20
 3a8:	28 1b       	sub	r18, r24
 3aa:	39 0b       	sbc	r19, r25
 3ac:	c9 01       	movw	r24, r18
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_putc>
	lcd_putc(val/1000%10+'0');
 3b4:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 3b8:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 3bc:	36 95       	lsr	r19
 3be:	27 95       	ror	r18
 3c0:	36 95       	lsr	r19
 3c2:	27 95       	ror	r18
 3c4:	36 95       	lsr	r19
 3c6:	27 95       	ror	r18
 3c8:	a5 ec       	ldi	r26, 0xC5	; 197
 3ca:	b0 e2       	ldi	r27, 0x20	; 32
 3cc:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 3d0:	ac 01       	movw	r20, r24
 3d2:	52 95       	swap	r21
 3d4:	42 95       	swap	r20
 3d6:	4f 70       	andi	r20, 0x0F	; 15
 3d8:	45 27       	eor	r20, r21
 3da:	5f 70       	andi	r21, 0x0F	; 15
 3dc:	45 27       	eor	r20, r21
 3de:	9a 01       	movw	r18, r20
 3e0:	ad ec       	ldi	r26, 0xCD	; 205
 3e2:	bc ec       	ldi	r27, 0xCC	; 204
 3e4:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	9c 01       	movw	r18, r24
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	82 0f       	add	r24, r18
 408:	93 1f       	adc	r25, r19
 40a:	9a 01       	movw	r18, r20
 40c:	28 1b       	sub	r18, r24
 40e:	39 0b       	sbc	r19, r25
 410:	c9 01       	movw	r24, r18
 412:	80 5d       	subi	r24, 0xD0	; 208
 414:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_putc>
 418:	08 95       	ret

0000041a <main>:
}

int main(void)
{	
	lcd_init(LCD_DISP_ON);
 41a:	8c e0       	ldi	r24, 0x0C	; 12
 41c:	0e 94 23 01 	call	0x246	; 0x246 <lcd_init>
	keyboardInit();
 420:	0e 94 49 00 	call	0x92	; 0x92 <keyboardInit>
	DDRA = 255;
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	8a bb       	out	0x1a, r24	; 26
	
	val = eeRead16(1);
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 92 02 	call	0x524	; 0x524 <eeRead16>
 42e:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
 432:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
    while (1) 
    {
		display();		
 436:	0e 94 5f 01 	call	0x2be	; 0x2be <display>
 43a:	83 ec       	ldi	r24, 0xC3	; 195
 43c:	99 e0       	ldi	r25, 0x09	; 9
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <main+0x24>
 442:	00 c0       	rjmp	.+0      	; 0x444 <main+0x2a>
 444:	00 00       	nop
		_delay_ms(10);
		uint8_t nexo = keyboardDecode(keyboardReadOnRelease())-'0';
 446:	0e 94 89 00 	call	0x112	; 0x112 <keyboardReadOnRelease>
 44a:	0e 94 94 00 	call	0x128	; 0x128 <keyboardDecode>
 44e:	40 ed       	ldi	r20, 0xD0	; 208
 450:	48 0f       	add	r20, r24
 452:	83 ec       	ldi	r24, 0xC3	; 195
 454:	99 e0       	ldi	r25, 0x09	; 9
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <main+0x3c>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <main+0x42>
 45c:	00 00       	nop
		_delay_ms(10);
		PORTA = nexo;	
 45e:	4b bb       	out	0x1b, r20	; 27
		if (nexo > 9) continue;
 460:	4a 30       	cpi	r20, 0x0A	; 10
 462:	48 f7       	brcc	.-46     	; 0x436 <main+0x1c>
		val = val%1000;
 464:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 468:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 46c:	9f 01       	movw	r18, r30
 46e:	36 95       	lsr	r19
 470:	27 95       	ror	r18
 472:	36 95       	lsr	r19
 474:	27 95       	ror	r18
 476:	36 95       	lsr	r19
 478:	27 95       	ror	r18
 47a:	a5 ec       	ldi	r26, 0xC5	; 197
 47c:	b0 e2       	ldi	r27, 0x20	; 32
 47e:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 482:	92 95       	swap	r25
 484:	82 95       	swap	r24
 486:	8f 70       	andi	r24, 0x0F	; 15
 488:	89 27       	eor	r24, r25
 48a:	9f 70       	andi	r25, 0x0F	; 15
 48c:	89 27       	eor	r24, r25
 48e:	68 ee       	ldi	r22, 0xE8	; 232
 490:	73 e0       	ldi	r23, 0x03	; 3
 492:	86 9f       	mul	r24, r22
 494:	90 01       	movw	r18, r0
 496:	87 9f       	mul	r24, r23
 498:	30 0d       	add	r19, r0
 49a:	96 9f       	mul	r25, r22
 49c:	30 0d       	add	r19, r0
 49e:	11 24       	eor	r1, r1
 4a0:	cf 01       	movw	r24, r30
 4a2:	82 1b       	sub	r24, r18
 4a4:	93 0b       	sbc	r25, r19
		val*=10;
 4a6:	bc 01       	movw	r22, r24
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	68 0f       	add	r22, r24
 4ba:	79 1f       	adc	r23, r25
		val+=nexo;
 4bc:	64 0f       	add	r22, r20
 4be:	71 1d       	adc	r23, r1
 4c0:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <__data_end+0x1>
 4c4:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <__data_end>
		eeWrite16(1, val);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 77 02 	call	0x4ee	; 0x4ee <eeWrite16>
 4d0:	b2 cf       	rjmp	.-156    	; 0x436 <main+0x1c>

000004d2 <eeWrite>:
#include "myeeprom.h"
#include <avr/interrupt.h>

void eeWrite(uint16_t pos, uint8_t val) {
	while (EECR &(1<<EEWE));
 4d2:	e1 99       	sbic	0x1c, 1	; 28
 4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <eeWrite>
	
	EEAR = pos;
 4d6:	9f bb       	out	0x1f, r25	; 31
 4d8:	8e bb       	out	0x1e, r24	; 30
	EEDR = val;
 4da:	6d bb       	out	0x1d, r22	; 29
	#ifdef cli
	cli();
 4dc:	f8 94       	cli
	#endif
	EECR |= (1<<EEMWE);
 4de:	8c b3       	in	r24, 0x1c	; 28
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);
 4e4:	8c b3       	in	r24, 0x1c	; 28
 4e6:	82 60       	ori	r24, 0x02	; 2
 4e8:	8c bb       	out	0x1c, r24	; 28
	#ifdef sei
	sei();
 4ea:	78 94       	sei
 4ec:	08 95       	ret

000004ee <eeWrite16>:
	#endif
}

void eeWrite16(uint16_t pos, uint16_t val) {
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	ec 01       	movw	r28, r24
 4f6:	16 2f       	mov	r17, r22
 4f8:	67 2f       	mov	r22, r23
	eeWrite(pos, val >> 8);
 4fa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <eeWrite>
	eeWrite(pos+1, (uint8_t)val);
 4fe:	61 2f       	mov	r22, r17
 500:	ce 01       	movw	r24, r28
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	0e 94 69 02 	call	0x4d2	; 0x4d2 <eeWrite>
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	08 95       	ret

00000510 <eeRead>:
uint8_t eeRead(uint8_t pos) {
	while (EECR &(1<<EEWE));
 510:	e1 99       	sbic	0x1c, 1	; 28
 512:	fe cf       	rjmp	.-4      	; 0x510 <eeRead>
	EEAR = pos;
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	9f bb       	out	0x1f, r25	; 31
 518:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 51a:	8c b3       	in	r24, 0x1c	; 28
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 520:	8d b3       	in	r24, 0x1d	; 29
}
 522:	08 95       	ret

00000524 <eeRead16>:

uint16_t eeRead16(uint8_t pos) {
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	18 2f       	mov	r17, r24
	uint16_t ans = eeRead(pos);
 52c:	0e 94 88 02 	call	0x510	; 0x510 <eeRead>
 530:	c8 2f       	mov	r28, r24
 532:	d0 e0       	ldi	r29, 0x00	; 0
	return (ans << 8) | eeRead(pos+1);
 534:	dc 2f       	mov	r29, r28
 536:	cc 27       	eor	r28, r28
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	81 0f       	add	r24, r17
 53c:	0e 94 88 02 	call	0x510	; 0x510 <eeRead>
 540:	9e 01       	movw	r18, r28
 542:	28 2b       	or	r18, r24
 544:	c9 01       	movw	r24, r18
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	08 95       	ret

0000054e <__umulhisi3>:
 54e:	a2 9f       	mul	r26, r18
 550:	b0 01       	movw	r22, r0
 552:	b3 9f       	mul	r27, r19
 554:	c0 01       	movw	r24, r0
 556:	a3 9f       	mul	r26, r19
 558:	70 0d       	add	r23, r0
 55a:	81 1d       	adc	r24, r1
 55c:	11 24       	eor	r1, r1
 55e:	91 1d       	adc	r25, r1
 560:	b2 9f       	mul	r27, r18
 562:	70 0d       	add	r23, r0
 564:	81 1d       	adc	r24, r1
 566:	11 24       	eor	r1, r1
 568:	91 1d       	adc	r25, r1
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
